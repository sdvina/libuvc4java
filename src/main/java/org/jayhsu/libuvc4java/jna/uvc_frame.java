package org.jayhsu.libuvc4java.jna;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
import org.jayhsu.libuvc4java.jna.LibuvcLibrary.timespec;
import org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval;
/**
 * <i>native declaration : include\libuvc.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class uvc_frame extends Structure {
	/** C type : void* */
	public Pointer data;
	public NativeSize data_bytes;
	public int width;
	public int height;
	/**
	 * @see uvc_frame_format<br>
	 * C type : uvc_frame_format
	 */
	public int frame_format;
	public NativeSize step;
	public int sequence;
	/** C type : timeval */
	public timeval capture_time;
	/** C type : timespec */
	public timespec capture_time_finished;
	/** C type : uvc_device_handle_t* */
	public PointerByReference source;
	public byte library_owns_data;
	/** C type : void* */
	public Pointer metadata;
	public NativeSize metadata_bytes;
	public uvc_frame() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("data", "data_bytes", "width", "height", "frame_format", "step", "sequence", "capture_time", "capture_time_finished", "source", "library_owns_data", "metadata", "metadata_bytes");
	}
	public uvc_frame(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends uvc_frame implements Structure.ByReference {
		
	};
	public static class ByValue extends uvc_frame implements Structure.ByValue {
		
	};
}
