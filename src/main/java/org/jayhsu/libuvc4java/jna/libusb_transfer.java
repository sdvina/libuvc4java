package org.jayhsu.libuvc4java.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.ptr.PointerByReference;
import java.util.Arrays;
import java.util.List;
import org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn;
/**
 * \ingroup libusb_asyncio<br>
 * The generic USB transfer structure. The user populates this structure and<br>
 * then submits it in order to request a transfer. After the transfer has<br>
 * completed, the library populates the transfer with the results and passes<br>
 * it back to the user.<br>
 * <i>native declaration : include\libusb.h:1287</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class libusb_transfer extends Structure {
	/** C type : libusb_device_handle* */
	public PointerByReference dev_handle;
	public byte flags;
	public byte endpoint;
	public byte type;
	public int timeout;
	/**
	 * @see libusb_transfer_status<br>
	 * C type : libusb_transfer_status
	 */
	public int status;
	public int length;
	public int actual_length;
	/** C type : libusb_transfer_cb_fn */
	public libusb_transfer_cb_fn callback;
	/** C type : void* */
	public Pointer user_data;
	/** C type : unsigned char* */
	public Pointer buffer;
	public int num_iso_packets;
	/** C type : libusb_iso_packet_descriptor[0] */
	public libusb_iso_packet_descriptor[] iso_packet_desc = new libusb_iso_packet_descriptor[0];
	public libusb_transfer() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("dev_handle", "flags", "endpoint", "type", "timeout", "status", "length", "actual_length", "callback", "user_data", "buffer", "num_iso_packets", "iso_packet_desc");
	}
	public libusb_transfer(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends libusb_transfer implements Structure.ByReference {
		
	};
	public static class ByValue extends libusb_transfer implements Structure.ByValue {
		
	};
}
