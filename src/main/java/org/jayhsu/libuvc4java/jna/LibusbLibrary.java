package org.jayhsu.libuvc4java.jna;
import com.ochafik.lang.jnaerator.runtime.NativeSize;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;
import com.sun.jna.win32.StdCallLibrary;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval;
/**
 * JNA Wrapper for library <b>libusb</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LibusbLibrary extends StdCallLibrary {
	public static final String JNA_LIBRARY_NAME = "libusb";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LibusbLibrary.JNA_LIBRARY_NAME);
	public static final LibusbLibrary INSTANCE = (LibusbLibrary)Native.loadLibrary(LibusbLibrary.JNA_LIBRARY_NAME, LibusbLibrary.class);
	/**
	 * \ingroup libusb_desc<br>
	 * Device and/or Interface Class codes<br>
	 * <i>native declaration : include\libusb.h:149</i><br>
	 * enum values
	 */
	public static interface libusb_class_code {
		/** <i>native declaration : include\libusb.h:154</i> */
		public static final int LIBUSB_CLASS_PER_INTERFACE = 0x00;
		/** <i>native declaration : include\libusb.h:157</i> */
		public static final int LIBUSB_CLASS_AUDIO = 0x01;
		/** <i>native declaration : include\libusb.h:160</i> */
		public static final int LIBUSB_CLASS_COMM = 0x02;
		/** <i>native declaration : include\libusb.h:163</i> */
		public static final int LIBUSB_CLASS_HID = 0x03;
		/** <i>native declaration : include\libusb.h:166</i> */
		public static final int LIBUSB_CLASS_PHYSICAL = 0x05;
		/** <i>native declaration : include\libusb.h:169</i> */
		public static final int LIBUSB_CLASS_IMAGE = 0x06;
		/**
		 * legacy name from libusb-0.1 usb.h<br>
		 * <i>native declaration : include\libusb.h:170</i>
		 */
		public static final int LIBUSB_CLASS_PTP = 0x06;
		/** <i>native declaration : include\libusb.h:173</i> */
		public static final int LIBUSB_CLASS_PRINTER = 0x07;
		/** <i>native declaration : include\libusb.h:176</i> */
		public static final int LIBUSB_CLASS_MASS_STORAGE = 0x08;
		/** <i>native declaration : include\libusb.h:179</i> */
		public static final int LIBUSB_CLASS_HUB = 0x09;
		/** <i>native declaration : include\libusb.h:182</i> */
		public static final int LIBUSB_CLASS_DATA = 0x0a;
		/** <i>native declaration : include\libusb.h:185</i> */
		public static final int LIBUSB_CLASS_SMART_CARD = 0x0b;
		/** <i>native declaration : include\libusb.h:188</i> */
		public static final int LIBUSB_CLASS_CONTENT_SECURITY = 0x0d;
		/** <i>native declaration : include\libusb.h:191</i> */
		public static final int LIBUSB_CLASS_VIDEO = 0x0e;
		/** <i>native declaration : include\libusb.h:194</i> */
		public static final int LIBUSB_CLASS_PERSONAL_HEALTHCARE = 0x0f;
		/** <i>native declaration : include\libusb.h:197</i> */
		public static final int LIBUSB_CLASS_DIAGNOSTIC_DEVICE = 0xdc;
		/** <i>native declaration : include\libusb.h:200</i> */
		public static final int LIBUSB_CLASS_WIRELESS = 0xe0;
		/** <i>native declaration : include\libusb.h:203</i> */
		public static final int LIBUSB_CLASS_MISCELLANEOUS = 0xef;
		/** <i>native declaration : include\libusb.h:206</i> */
		public static final int LIBUSB_CLASS_APPLICATION = 0xfe;
		/** <i>native declaration : include\libusb.h:209</i> */
		public static final int LIBUSB_CLASS_VENDOR_SPEC = 0xff;
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Descriptor types as defined by the USB specification.<br>
	 * <i>native declaration : include\libusb.h:214</i><br>
	 * enum values
	 */
	public static interface libusb_descriptor_type {
		/** <i>native declaration : include\libusb.h:216</i> */
		public static final int LIBUSB_DT_DEVICE = 0x01;
		/** <i>native declaration : include\libusb.h:219</i> */
		public static final int LIBUSB_DT_CONFIG = 0x02;
		/** <i>native declaration : include\libusb.h:222</i> */
		public static final int LIBUSB_DT_STRING = 0x03;
		/** <i>native declaration : include\libusb.h:225</i> */
		public static final int LIBUSB_DT_INTERFACE = 0x04;
		/** <i>native declaration : include\libusb.h:228</i> */
		public static final int LIBUSB_DT_ENDPOINT = 0x05;
		/** <i>native declaration : include\libusb.h:232</i> */
		public static final int LIBUSB_DT_INTERFACE_ASSOCIATION = 0x0b;
		/** <i>native declaration : include\libusb.h:235</i> */
		public static final int LIBUSB_DT_BOS = 0x0f;
		/** <i>native declaration : include\libusb.h:238</i> */
		public static final int LIBUSB_DT_DEVICE_CAPABILITY = 0x10;
		/** <i>native declaration : include\libusb.h:241</i> */
		public static final int LIBUSB_DT_HID = 0x21;
		/** <i>native declaration : include\libusb.h:244</i> */
		public static final int LIBUSB_DT_REPORT = 0x22;
		/** <i>native declaration : include\libusb.h:247</i> */
		public static final int LIBUSB_DT_PHYSICAL = 0x23;
		/** <i>native declaration : include\libusb.h:250</i> */
		public static final int LIBUSB_DT_HUB = 0x29;
		/** <i>native declaration : include\libusb.h:253</i> */
		public static final int LIBUSB_DT_SUPERSPEED_HUB = 0x2a;
		/** <i>native declaration : include\libusb.h:256</i> */
		public static final int LIBUSB_DT_SS_ENDPOINT_COMPANION = 0x30;
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Endpoint direction. Values for bit 7 of the<br>
	 * \ref libusb_endpoint_descriptor::bEndpointAddress "endpoint address" scheme.<br>
	 * <i>native declaration : include\libusb.h:290</i><br>
	 * enum values
	 */
	public static interface libusb_endpoint_direction {
		/** <i>native declaration : include\libusb.h:292</i> */
		public static final int LIBUSB_ENDPOINT_OUT = 0x00;
		/** <i>native declaration : include\libusb.h:295</i> */
		public static final int LIBUSB_ENDPOINT_IN = 0x80;
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Endpoint transfer type. Values for bits 0:1 of the<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "endpoint attributes" field.<br>
	 * <i>native declaration : include\libusb.h:304</i><br>
	 * enum values
	 */
	public static interface libusb_endpoint_transfer_type {
		/** <i>native declaration : include\libusb.h:306</i> */
		public static final int LIBUSB_ENDPOINT_TRANSFER_TYPE_CONTROL = 0x0;
		/** <i>native declaration : include\libusb.h:309</i> */
		public static final int LIBUSB_ENDPOINT_TRANSFER_TYPE_ISOCHRONOUS = 0x1;
		/** <i>native declaration : include\libusb.h:312</i> */
		public static final int LIBUSB_ENDPOINT_TRANSFER_TYPE_BULK = 0x2;
		/** <i>native declaration : include\libusb.h:315</i> */
		public static final int LIBUSB_ENDPOINT_TRANSFER_TYPE_INTERRUPT = 0x3;
	};
	/**
	 * \ingroup libusb_misc<br>
	 * Standard requests, as defined in table 9-5 of the USB 3.0 specifications<br>
	 * <i>native declaration : include\libusb.h:320</i><br>
	 * enum values
	 */
	public static interface libusb_standard_request {
		/** <i>native declaration : include\libusb.h:322</i> */
		public static final int LIBUSB_REQUEST_GET_STATUS = 0x00;
		/** <i>native declaration : include\libusb.h:325</i> */
		public static final int LIBUSB_REQUEST_CLEAR_FEATURE = 0x01;
		/** <i>native declaration : include\libusb.h:330</i> */
		public static final int LIBUSB_REQUEST_SET_FEATURE = 0x03;
		/** <i>native declaration : include\libusb.h:335</i> */
		public static final int LIBUSB_REQUEST_SET_ADDRESS = 0x05;
		/** <i>native declaration : include\libusb.h:338</i> */
		public static final int LIBUSB_REQUEST_GET_DESCRIPTOR = 0x06;
		/** <i>native declaration : include\libusb.h:341</i> */
		public static final int LIBUSB_REQUEST_SET_DESCRIPTOR = 0x07;
		/** <i>native declaration : include\libusb.h:344</i> */
		public static final int LIBUSB_REQUEST_GET_CONFIGURATION = 0x08;
		/** <i>native declaration : include\libusb.h:347</i> */
		public static final int LIBUSB_REQUEST_SET_CONFIGURATION = 0x09;
		/** <i>native declaration : include\libusb.h:350</i> */
		public static final int LIBUSB_REQUEST_GET_INTERFACE = 0x0a;
		/** <i>native declaration : include\libusb.h:353</i> */
		public static final int LIBUSB_REQUEST_SET_INTERFACE = 0x0b;
		/** <i>native declaration : include\libusb.h:356</i> */
		public static final int LIBUSB_REQUEST_SYNCH_FRAME = 0x0c;
		/** <i>native declaration : include\libusb.h:359</i> */
		public static final int LIBUSB_REQUEST_SET_SEL = 0x30;
		/** <i>native declaration : include\libusb.h:363</i> */
		public static final int LIBUSB_SET_ISOCH_DELAY = 0x31;
	};
	/**
	 * \ingroup libusb_misc<br>
	 * Request type bits of the<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field in control<br>
	 * transfers.<br>
	 * <i>native declaration : include\libusb.h:370</i><br>
	 * enum values
	 */
	public static interface libusb_request_type {
		/** <i>native declaration : include\libusb.h:372</i> */
		public static final int LIBUSB_REQUEST_TYPE_STANDARD = (0x00 << 5);
		/** <i>native declaration : include\libusb.h:375</i> */
		public static final int LIBUSB_REQUEST_TYPE_CLASS = (0x01 << 5);
		/** <i>native declaration : include\libusb.h:378</i> */
		public static final int LIBUSB_REQUEST_TYPE_VENDOR = (0x02 << 5);
		/** <i>native declaration : include\libusb.h:381</i> */
		public static final int LIBUSB_REQUEST_TYPE_RESERVED = (0x03 << 5);
	};
	/**
	 * \ingroup libusb_misc<br>
	 * Recipient bits of the<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field in control<br>
	 * transfers. Values 4 through 31 are reserved.<br>
	 * <i>native declaration : include\libusb.h:388</i><br>
	 * enum values
	 */
	public static interface libusb_request_recipient {
		/** <i>native declaration : include\libusb.h:390</i> */
		public static final int LIBUSB_RECIPIENT_DEVICE = 0x00;
		/** <i>native declaration : include\libusb.h:393</i> */
		public static final int LIBUSB_RECIPIENT_INTERFACE = 0x01;
		/** <i>native declaration : include\libusb.h:396</i> */
		public static final int LIBUSB_RECIPIENT_ENDPOINT = 0x02;
		/** <i>native declaration : include\libusb.h:399</i> */
		public static final int LIBUSB_RECIPIENT_OTHER = 0x03;
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Synchronization type for isochronous endpoints. Values for bits 2:3 of the<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in<br>
	 * libusb_endpoint_descriptor.<br>
	 * <i>native declaration : include\libusb.h:409</i><br>
	 * enum values
	 */
	public static interface libusb_iso_sync_type {
		/** <i>native declaration : include\libusb.h:411</i> */
		public static final int LIBUSB_ISO_SYNC_TYPE_NONE = 0x0;
		/** <i>native declaration : include\libusb.h:414</i> */
		public static final int LIBUSB_ISO_SYNC_TYPE_ASYNC = 0x1;
		/** <i>native declaration : include\libusb.h:417</i> */
		public static final int LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 0x2;
		/** <i>native declaration : include\libusb.h:420</i> */
		public static final int LIBUSB_ISO_SYNC_TYPE_SYNC = 0x3;
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Usage type for isochronous endpoints. Values for bits 4:5 of the<br>
	 * \ref libusb_endpoint_descriptor::bmAttributes "bmAttributes" field in<br>
	 * libusb_endpoint_descriptor.<br>
	 * <i>native declaration : include\libusb.h:430</i><br>
	 * enum values
	 */
	public static interface libusb_iso_usage_type {
		/** <i>native declaration : include\libusb.h:432</i> */
		public static final int LIBUSB_ISO_USAGE_TYPE_DATA = 0x0;
		/** <i>native declaration : include\libusb.h:435</i> */
		public static final int LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 0x1;
		/** <i>native declaration : include\libusb.h:438</i> */
		public static final int LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 0x2;
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Supported speeds (wSpeedSupported) bitfield. Indicates what<br>
	 * speeds the device supports.<br>
	 * <i>native declaration : include\libusb.h:445</i><br>
	 * enum values
	 */
	public static interface libusb_supported_speed {
		/** <i>native declaration : include\libusb.h:447</i> */
		public static final int LIBUSB_LOW_SPEED_OPERATION = (1 << 0);
		/** <i>native declaration : include\libusb.h:450</i> */
		public static final int LIBUSB_FULL_SPEED_OPERATION = (1 << 1);
		/** <i>native declaration : include\libusb.h:453</i> */
		public static final int LIBUSB_HIGH_SPEED_OPERATION = (1 << 2);
		/** <i>native declaration : include\libusb.h:456</i> */
		public static final int LIBUSB_SUPER_SPEED_OPERATION = (1 << 3);
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Masks for the bits of the<br>
	 * \ref libusb_usb_2_0_extension_descriptor::bmAttributes "bmAttributes" field<br>
	 * of the USB 2.0 Extension descriptor.<br>
	 * <i>native declaration : include\libusb.h:464</i><br>
	 * enum values
	 */
	public static interface libusb_usb_2_0_extension_attributes {
		/** <i>native declaration : include\libusb.h:466</i> */
		public static final int LIBUSB_BM_LPM_SUPPORT = (1 << 1);
	};
	/**
	 * \ingroup libusb_desc<br>
	 * Masks for the bits of the<br>
	 * \ref libusb_ss_usb_device_capability_descriptor::bmAttributes "bmAttributes" field<br>
	 * field of the SuperSpeed USB Device Capability descriptor.<br>
	 * <i>native declaration : include\libusb.h:474</i><br>
	 * enum values
	 */
	public static interface libusb_ss_usb_device_capability_attributes {
		/** <i>native declaration : include\libusb.h:476</i> */
		public static final int LIBUSB_BM_LTM_SUPPORT = (1 << 1);
	};
	/**
	 * \ingroup libusb_desc<br>
	 * USB capability types<br>
	 * <i>native declaration : include\libusb.h:482</i><br>
	 * enum values
	 */
	public static interface libusb_bos_type {
		/** <i>native declaration : include\libusb.h:484</i> */
		public static final int LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY = 0x01;
		/** <i>native declaration : include\libusb.h:487</i> */
		public static final int LIBUSB_BT_USB_2_0_EXTENSION = 0x02;
		/** <i>native declaration : include\libusb.h:490</i> */
		public static final int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY = 0x03;
		/** <i>native declaration : include\libusb.h:493</i> */
		public static final int LIBUSB_BT_CONTAINER_ID = 0x04;
		/** <i>native declaration : include\libusb.h:496</i> */
		public static final int LIBUSB_BT_PLATFORM_DESCRIPTOR = 0x05;
	};
	/**
	 * \ingroup libusb_dev<br>
	 * Speed codes. Indicates the speed at which the device is operating.<br>
	 * <i>native declaration : include\libusb.h:1084</i><br>
	 * enum values
	 */
	public static interface libusb_speed {
		/** <i>native declaration : include\libusb.h:1086</i> */
		public static final int LIBUSB_SPEED_UNKNOWN = 0;
		/** <i>native declaration : include\libusb.h:1089</i> */
		public static final int LIBUSB_SPEED_LOW = 1;
		/** <i>native declaration : include\libusb.h:1092</i> */
		public static final int LIBUSB_SPEED_FULL = 2;
		/** <i>native declaration : include\libusb.h:1095</i> */
		public static final int LIBUSB_SPEED_HIGH = 3;
		/** <i>native declaration : include\libusb.h:1098</i> */
		public static final int LIBUSB_SPEED_SUPER = 4;
		/** <i>native declaration : include\libusb.h:1101</i> */
		public static final int LIBUSB_SPEED_SUPER_PLUS = 5;
	};
	/**
	 * \ingroup libusb_misc<br>
	 * Error codes. Most libusb functions return 0 on success or one of these<br>
	 * codes on failure.<br>
	 * You can call libusb_error_name() to retrieve a string representation of an<br>
	 * error code or libusb_strerror() to get an end-user suitable description of<br>
	 * an error code.<br>
	 * <i>native declaration : include\libusb.h:1111</i><br>
	 * enum values
	 */
	public static interface libusb_error {
		/** <i>native declaration : include\libusb.h:1113</i> */
		public static final int LIBUSB_SUCCESS = 0;
		/** <i>native declaration : include\libusb.h:1116</i> */
		public static final int LIBUSB_ERROR_IO = -1;
		/** <i>native declaration : include\libusb.h:1119</i> */
		public static final int LIBUSB_ERROR_INVALID_PARAM = -2;
		/** <i>native declaration : include\libusb.h:1122</i> */
		public static final int LIBUSB_ERROR_ACCESS = -3;
		/** <i>native declaration : include\libusb.h:1125</i> */
		public static final int LIBUSB_ERROR_NO_DEVICE = -4;
		/** <i>native declaration : include\libusb.h:1128</i> */
		public static final int LIBUSB_ERROR_NOT_FOUND = -5;
		/** <i>native declaration : include\libusb.h:1131</i> */
		public static final int LIBUSB_ERROR_BUSY = -6;
		/** <i>native declaration : include\libusb.h:1134</i> */
		public static final int LIBUSB_ERROR_TIMEOUT = -7;
		/** <i>native declaration : include\libusb.h:1137</i> */
		public static final int LIBUSB_ERROR_OVERFLOW = -8;
		/** <i>native declaration : include\libusb.h:1140</i> */
		public static final int LIBUSB_ERROR_PIPE = -9;
		/** <i>native declaration : include\libusb.h:1143</i> */
		public static final int LIBUSB_ERROR_INTERRUPTED = -10;
		/** <i>native declaration : include\libusb.h:1146</i> */
		public static final int LIBUSB_ERROR_NO_MEM = -11;
		/** <i>native declaration : include\libusb.h:1149</i> */
		public static final int LIBUSB_ERROR_NOT_SUPPORTED = -12;
		/** <i>native declaration : include\libusb.h:1155</i> */
		public static final int LIBUSB_ERROR_OTHER = -99;
	};
	/**
	 * \ingroup libusb_asyncio<br>
	 * Transfer type<br>
	 * <i>native declaration : include\libusb.h:1163</i><br>
	 * enum values
	 */
	public static interface libusb_transfer_type {
		/** <i>native declaration : include\libusb.h:1165</i> */
		public static final int LIBUSB_TRANSFER_TYPE_CONTROL = 0;
		/** <i>native declaration : include\libusb.h:1168</i> */
		public static final int LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1;
		/** <i>native declaration : include\libusb.h:1171</i> */
		public static final int LIBUSB_TRANSFER_TYPE_BULK = 2;
		/** <i>native declaration : include\libusb.h:1174</i> */
		public static final int LIBUSB_TRANSFER_TYPE_INTERRUPT = 3;
		/** <i>native declaration : include\libusb.h:1177</i> */
		public static final int LIBUSB_TRANSFER_TYPE_BULK_STREAM = 4;
	};
	/**
	 * \ingroup libusb_asyncio<br>
	 * Transfer status codes<br>
	 * <i>native declaration : include\libusb.h:1182</i><br>
	 * enum values
	 */
	public static interface libusb_transfer_status {
		/** <i>native declaration : include\libusb.h:1185</i> */
		public static final int LIBUSB_TRANSFER_COMPLETED = 0;
		/** <i>native declaration : include\libusb.h:1188</i> */
		public static final int LIBUSB_TRANSFER_ERROR = 1;
		/** <i>native declaration : include\libusb.h:1191</i> */
		public static final int LIBUSB_TRANSFER_TIMED_OUT = 2;
		/** <i>native declaration : include\libusb.h:1194</i> */
		public static final int LIBUSB_TRANSFER_CANCELLED = 3;
		/** <i>native declaration : include\libusb.h:1198</i> */
		public static final int LIBUSB_TRANSFER_STALL = 4;
		/** <i>native declaration : include\libusb.h:1201</i> */
		public static final int LIBUSB_TRANSFER_NO_DEVICE = 5;
		/** <i>native declaration : include\libusb.h:1204</i> */
		public static final int LIBUSB_TRANSFER_OVERFLOW = 6;
	};
	/**
	 * \ingroup libusb_asyncio<br>
	 * libusb_transfer.flags values<br>
	 * <i>native declaration : include\libusb.h:1212</i><br>
	 * enum values
	 */
	public static interface libusb_transfer_flags {
		/** <i>native declaration : include\libusb.h:1214</i> */
		public static final int LIBUSB_TRANSFER_SHORT_NOT_OK = (1 << 0);
		/** <i>native declaration : include\libusb.h:1220</i> */
		public static final int LIBUSB_TRANSFER_FREE_BUFFER = (1 << 1);
		/** <i>native declaration : include\libusb.h:1226</i> */
		public static final int LIBUSB_TRANSFER_FREE_TRANSFER = (1 << 2);
		/** <i>native declaration : include\libusb.h:1252</i> */
		public static final int LIBUSB_TRANSFER_ADD_ZERO_PACKET = (1 << 3);
	};
	/**
	 * \ingroup libusb_misc<br>
	 * Capabilities supported by an instance of libusb on the current running<br>
	 * platform. Test if the loaded library supports a given capability by calling<br>
	 * \ref libusb_has_capability().<br>
	 * <i>native declaration : include\libusb.h:1353</i><br>
	 * enum values
	 */
	public static interface libusb_capability {
		/** <i>native declaration : include\libusb.h:1355</i> */
		public static final int LIBUSB_CAP_HAS_CAPABILITY = 0x0000;
		/** <i>native declaration : include\libusb.h:1358</i> */
		public static final int LIBUSB_CAP_HAS_HOTPLUG = 0x0001;
		/** <i>native declaration : include\libusb.h:1364</i> */
		public static final int LIBUSB_CAP_HAS_HID_ACCESS = 0x0100;
		/** <i>native declaration : include\libusb.h:1368</i> */
		public static final int LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER = 0x0101;
	};
	/**
	 * \ingroup libusb_lib<br>
	 *  Log message levels.<br>
	 * <i>native declaration : include\libusb.h:1374</i><br>
	 * enum values
	 */
	public static interface libusb_log_level {
		/** <i>native declaration : include\libusb.h:1376</i> */
		public static final int LIBUSB_LOG_LEVEL_NONE = 0;
		/** <i>native declaration : include\libusb.h:1379</i> */
		public static final int LIBUSB_LOG_LEVEL_ERROR = 1;
		/** <i>native declaration : include\libusb.h:1382</i> */
		public static final int LIBUSB_LOG_LEVEL_WARNING = 2;
		/** <i>native declaration : include\libusb.h:1385</i> */
		public static final int LIBUSB_LOG_LEVEL_INFO = 3;
		/** <i>native declaration : include\libusb.h:1388</i> */
		public static final int LIBUSB_LOG_LEVEL_DEBUG = 4;
	};
	/**
	 * \ingroup libusb_lib<br>
	 *  Log callback mode.<br>
	 *  Since version 1.0.23, \ref LIBUSB_API_VERSION >= 0x01000107<br>
	 * \see libusb_set_log_cb()<br>
	 * <i>native declaration : include\libusb.h:1398</i><br>
	 * enum values
	 */
	public static interface libusb_log_cb_mode {
		/** <i>native declaration : include\libusb.h:1400</i> */
		public static final int LIBUSB_LOG_CB_GLOBAL = (1 << 0);
		/** <i>native declaration : include\libusb.h:1403</i> */
		public static final int LIBUSB_LOG_CB_CONTEXT = (1 << 1);
	};
	/**
	 * \ingroup libusb_lib<br>
	 * Available option values for libusb_set_option() and libusb_init_context().<br>
	 * <i>native declaration : include\libusb.h:1409</i><br>
	 * enum values
	 */
	public static interface libusb_option {
		/** <i>native declaration : include\libusb.h:1432</i> */
		public static final int LIBUSB_OPTION_LOG_LEVEL = 0;
		/** <i>native declaration : include\libusb.h:1441</i> */
		public static final int LIBUSB_OPTION_USE_USBDK = 1;
		/** <i>native declaration : include\libusb.h:1461</i> */
		public static final int LIBUSB_OPTION_NO_DEVICE_DISCOVERY = 2;
		/** <i>native declaration : include\libusb.h:1474</i> */
		public static final int LIBUSB_OPTION_LOG_CB = 3;
		/** <i>native declaration : include\libusb.h:1476</i> */
		public static final int LIBUSB_OPTION_MAX = 4;
	};
	/**
	 * <i>native declaration : include\libusb.h</i><br>
	 * enum values
	 */
	public static interface libusb_hotplug_event {
		/** <i>native declaration : include\libusb.h:2115</i> */
		public static final int LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED = (1 << 0);
		/** <i>native declaration : include\libusb.h:2120</i> */
		public static final int LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT = (1 << 1);
	};
	/**
	 * <i>native declaration : include\libusb.h</i><br>
	 * enum values
	 */
	public static interface libusb_hotplug_flag {
		/** <i>native declaration : include\libusb.h:2130</i> */
		public static final int LIBUSB_HOTPLUG_ENUMERATE = (1 << 0);
	};
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_FLEXIBLE_ARRAY = (int)0;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_API_VERSION = (int)0x0100010A;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSBX_API_VERSION = (int)0x0100010A;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_DEVICE_SIZE = (int)18;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_CONFIG_SIZE = (int)9;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_INTERFACE_SIZE = (int)9;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_ENDPOINT_SIZE = (int)7;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_ENDPOINT_AUDIO_SIZE = (int)9;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_HUB_NONVAR_SIZE = (int)7;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE = (int)6;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_BOS_SIZE = (int)5;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_DEVICE_CAPABILITY_SIZE = (int)3;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_BT_USB_2_0_EXTENSION_SIZE = (int)7;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_BT_SS_USB_DEVICE_CAPABILITY_SIZE = (int)10;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_BT_CONTAINER_ID_SIZE = (int)20;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_BT_PLATFORM_DESCRIPTOR_MIN_SIZE = (int)20;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_DT_BOS_MAX_SIZE = (int)(5 + 7 + 10 + 20);
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_ENDPOINT_ADDRESS_MASK = (int)0x0f;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_ENDPOINT_DIR_MASK = (int)0x80;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_TRANSFER_TYPE_MASK = (int)0x03;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_ISO_SYNC_TYPE_MASK = (int)0x0c;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_ISO_USAGE_TYPE_MASK = (int)0x30;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_ERROR_COUNT = (int)14;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_HOTPLUG_NO_FLAGS = (int)0;
	/** <i>native declaration : include\libusb.h</i> */
	public static final int LIBUSB_HOTPLUG_MATCH_ANY = (int)-1;
	/** <i>native declaration : include\libusb.h</i> */
	public interface libusb_transfer_cb_fn extends StdCallLibrary.StdCallCallback {
		void apply(libusb_transfer transfer);
	};
	/** <i>native declaration : include\libusb.h</i> */
	public interface libusb_log_cb extends StdCallLibrary.StdCallCallback {
		void apply(Pointer ctx, int level, Pointer str);
	};
	/** <i>native declaration : include\libusb.h</i> */
	public interface libusb_pollfd_added_cb extends StdCallLibrary.StdCallCallback {
		void apply(int fd, short events, Pointer user_data);
	};
	/** <i>native declaration : include\libusb.h</i> */
	public interface libusb_pollfd_removed_cb extends StdCallLibrary.StdCallCallback {
		void apply(int fd, Pointer user_data);
	};
	/** <i>native declaration : include\libusb.h</i> */
	public interface libusb_hotplug_callback_fn extends StdCallLibrary.StdCallCallback {
		int apply(Pointer ctx, Pointer device, int event, Pointer user_data);
	};
	/**
	 * \ingroup libusb_misc<br>
	 * Convert a 16-bit value from host-endian to little-endian format. On<br>
	 * little endian systems, this function does nothing. On big endian systems,<br>
	 * the bytes are swapped.<br>
	 * \param x the host-endian value to convert<br>
	 * \returns the value in little-endian byte order<br>
	 * Original signature : <code>uint16_t libusb_cpu_to_le16(const uint16_t)</code><br>
	 * <i>native declaration : include\libusb.h:124</i>
	 */
	short libusb_cpu_to_le16(short x);
	/**
	 * Original signature : <code>int libusb_init(libusb_context**)</code><br>
	 * <i>native declaration : include\libusb.h:1507</i>
	 */
	int libusb_init(PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_init_context(libusb_context**, libusb_init_option[], int)</code><br>
	 * <i>native declaration : include\libusb.h:1508</i><br>
	 * @deprecated use the safer method {@link #libusb_init_context(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_init_option[], int)} instead
	 */
	@Deprecated 
	int libusb_init_context(PointerByReference ctx, Pointer options, int num_options);
	/**
	 * Original signature : <code>int libusb_init_context(libusb_context**, libusb_init_option[], int)</code><br>
	 * <i>native declaration : include\libusb.h:1508</i>
	 */
	int libusb_init_context(PointerByReference ctx, libusb_init_option options[], int num_options);
	/**
	 * Original signature : <code>void libusb_exit(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:1509</i><br>
	 * @deprecated use the safer method {@link #libusb_exit(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_exit(Pointer ctx);
	/**
	 * Original signature : <code>void libusb_exit(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:1509</i>
	 */
	void libusb_exit(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_set_debug(libusb_context*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1510</i><br>
	 * @deprecated use the safer method {@link #libusb_set_debug(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void libusb_set_debug(Pointer ctx, int level);
	/**
	 * Original signature : <code>void libusb_set_debug(libusb_context*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1510</i>
	 */
	void libusb_set_debug(PointerByReference ctx, int level);
	/**
	 * may be deprecated in the future in favor of lubusb_init_context()+libusb_set_option()<br>
	 * Original signature : <code>void libusb_set_log_cb(libusb_context*, libusb_log_cb, int)</code><br>
	 * <i>native declaration : include\libusb.h:1512</i><br>
	 * @deprecated use the safer method {@link #libusb_set_log_cb(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_log_cb, int)} instead
	 */
	@Deprecated 
	void libusb_set_log_cb(Pointer ctx, LibusbLibrary.libusb_log_cb cb, int mode);
	/**
	 * may be deprecated in the future in favor of lubusb_init_context()+libusb_set_option()<br>
	 * Original signature : <code>void libusb_set_log_cb(libusb_context*, libusb_log_cb, int)</code><br>
	 * <i>native declaration : include\libusb.h:1512</i>
	 */
	void libusb_set_log_cb(PointerByReference ctx, LibusbLibrary.libusb_log_cb cb, int mode);
	/**
	 * Original signature : <code>libusb_version* libusb_get_version()</code><br>
	 * <i>native declaration : include\libusb.h:1513</i>
	 */
	libusb_version libusb_get_version();
	/**
	 * Original signature : <code>int libusb_has_capability(uint32_t)</code><br>
	 * <i>native declaration : include\libusb.h:1514</i>
	 */
	int libusb_has_capability(int capability);
	/**
	 * Original signature : <code>char* libusb_error_name(int)</code><br>
	 * <i>native declaration : include\libusb.h:1515</i>
	 */
	Pointer libusb_error_name(int errcode);
	/**
	 * Original signature : <code>int libusb_setlocale(const char*)</code><br>
	 * <i>native declaration : include\libusb.h:1516</i><br>
	 * @deprecated use the safer methods {@link #libusb_setlocale(java.lang.String)} and {@link #libusb_setlocale(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int libusb_setlocale(Pointer locale);
	/**
	 * Original signature : <code>int libusb_setlocale(const char*)</code><br>
	 * <i>native declaration : include\libusb.h:1516</i>
	 */
	int libusb_setlocale(String locale);
	/**
	 * Original signature : <code>char* libusb_strerror(int)</code><br>
	 * <i>native declaration : include\libusb.h:1517</i>
	 */
	Pointer libusb_strerror(int errcode);
	/**
	 * Original signature : <code>ssize_t libusb_get_device_list(libusb_context*, libusb_device***)</code><br>
	 * <i>native declaration : include\libusb.h:1519</i><br>
	 * @deprecated use the safer method {@link #libusb_get_device_list(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	LibusbLibrary.ssize_t libusb_get_device_list(Pointer ctx, PointerByReference list);
	/**
	 * Original signature : <code>ssize_t libusb_get_device_list(libusb_context*, libusb_device***)</code><br>
	 * <i>native declaration : include\libusb.h:1519</i>
	 */
	LibusbLibrary.ssize_t libusb_get_device_list(PointerByReference ctx, PointerByReference list);
	/**
	 * Original signature : <code>void libusb_free_device_list(libusb_device**, int)</code><br>
	 * <i>native declaration : include\libusb.h:1521</i>
	 */
	void libusb_free_device_list(PointerByReference list, int unref_devices);
	/**
	 * Original signature : <code>libusb_device* libusb_ref_device(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1523</i><br>
	 * @deprecated use the safer method {@link #libusb_ref_device(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference libusb_ref_device(Pointer dev);
	/**
	 * Original signature : <code>libusb_device* libusb_ref_device(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1523</i>
	 */
	PointerByReference libusb_ref_device(PointerByReference dev);
	/**
	 * Original signature : <code>void libusb_unref_device(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1524</i><br>
	 * @deprecated use the safer method {@link #libusb_unref_device(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_unref_device(Pointer dev);
	/**
	 * Original signature : <code>void libusb_unref_device(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1524</i>
	 */
	void libusb_unref_device(PointerByReference dev);
	/**
	 * Original signature : <code>int libusb_get_configuration(libusb_device_handle*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:1526</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_configuration(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #libusb_get_configuration(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int libusb_get_configuration(Pointer dev, IntByReference config);
	/**
	 * Original signature : <code>int libusb_get_configuration(libusb_device_handle*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:1526</i>
	 */
	int libusb_get_configuration(PointerByReference dev, IntBuffer config);
	/**
	 * Original signature : <code>int libusb_get_configuration(libusb_device_handle*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:1526</i>
	 */
	int libusb_get_configuration(PointerByReference dev, IntByReference config);
	/**
	 * Original signature : <code>int libusb_get_device_descriptor(libusb_device*, libusb_device_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1528</i><br>
	 * @deprecated use the safer method {@link #libusb_get_device_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_device_descriptor)} instead
	 */
	@Deprecated 
	int libusb_get_device_descriptor(Pointer dev, libusb_device_descriptor desc);
	/**
	 * Original signature : <code>int libusb_get_device_descriptor(libusb_device*, libusb_device_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1528</i>
	 */
	int libusb_get_device_descriptor(PointerByReference dev, libusb_device_descriptor desc);
	/**
	 * Original signature : <code>int libusb_get_active_config_descriptor(libusb_device*, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1530</i><br>
	 * @deprecated use the safer method {@link #libusb_get_active_config_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_config_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_active_config_descriptor(Pointer dev, PointerByReference config);
	/**
	 * Original signature : <code>int libusb_get_active_config_descriptor(libusb_device*, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1530</i>
	 */
	int libusb_get_active_config_descriptor(PointerByReference dev, libusb_config_descriptor.ByReference config[]);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1532</i><br>
	 * @deprecated use the safer method {@link #libusb_get_config_descriptor(com.sun.jna.ptr.PointerByReference, byte, org.jayhsu.libuvc4java.jna.libusb_config_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_config_descriptor(Pointer dev, byte config_index, PointerByReference config);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1532</i>
	 */
	int libusb_get_config_descriptor(PointerByReference dev, byte config_index, libusb_config_descriptor.ByReference config[]);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor_by_value(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1534</i><br>
	 * @deprecated use the safer method {@link #libusb_get_config_descriptor_by_value(com.sun.jna.ptr.PointerByReference, byte, org.jayhsu.libuvc4java.jna.libusb_config_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_config_descriptor_by_value(Pointer dev, byte bConfigurationValue, PointerByReference config);
	/**
	 * Original signature : <code>int libusb_get_config_descriptor_by_value(libusb_device*, uint8_t, libusb_config_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1534</i>
	 */
	int libusb_get_config_descriptor_by_value(PointerByReference dev, byte bConfigurationValue, libusb_config_descriptor.ByReference config[]);
	/**
	 * Original signature : <code>void libusb_free_config_descriptor(libusb_config_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1536</i>
	 */
	void libusb_free_config_descriptor(libusb_config_descriptor config);
	/**
	 * Original signature : <code>int libusb_get_ss_endpoint_companion_descriptor(libusb_context*, libusb_endpoint_descriptor*, libusb_ss_endpoint_companion_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1538</i><br>
	 * @deprecated use the safer method {@link #libusb_get_ss_endpoint_companion_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_endpoint_descriptor, org.jayhsu.libuvc4java.jna.libusb_ss_endpoint_companion_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_ss_endpoint_companion_descriptor(Pointer ctx, libusb_endpoint_descriptor endpoint, PointerByReference ep_comp);
	/**
	 * Original signature : <code>int libusb_get_ss_endpoint_companion_descriptor(libusb_context*, libusb_endpoint_descriptor*, libusb_ss_endpoint_companion_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1538</i>
	 */
	int libusb_get_ss_endpoint_companion_descriptor(PointerByReference ctx, libusb_endpoint_descriptor endpoint, libusb_ss_endpoint_companion_descriptor.ByReference ep_comp[]);
	/**
	 * Original signature : <code>void libusb_free_ss_endpoint_companion_descriptor(libusb_ss_endpoint_companion_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1542</i>
	 */
	void libusb_free_ss_endpoint_companion_descriptor(libusb_ss_endpoint_companion_descriptor ep_comp);
	/**
	 * Original signature : <code>int libusb_get_bos_descriptor(libusb_device_handle*, libusb_bos_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1544</i><br>
	 * @deprecated use the safer method {@link #libusb_get_bos_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_bos_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_bos_descriptor(Pointer dev_handle, PointerByReference bos);
	/**
	 * Original signature : <code>int libusb_get_bos_descriptor(libusb_device_handle*, libusb_bos_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1544</i>
	 */
	int libusb_get_bos_descriptor(PointerByReference dev_handle, libusb_bos_descriptor.ByReference bos[]);
	/**
	 * Original signature : <code>void libusb_free_bos_descriptor(libusb_bos_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1546</i>
	 */
	void libusb_free_bos_descriptor(libusb_bos_descriptor bos);
	/**
	 * Original signature : <code>int libusb_get_usb_2_0_extension_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_usb_2_0_extension_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1547</i><br>
	 * @deprecated use the safer method {@link #libusb_get_usb_2_0_extension_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_bos_dev_capability_descriptor, org.jayhsu.libuvc4java.jna.libusb_usb_2_0_extension_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_usb_2_0_extension_descriptor(Pointer ctx, libusb_bos_dev_capability_descriptor dev_cap, PointerByReference usb_2_0_extension);
	/**
	 * Original signature : <code>int libusb_get_usb_2_0_extension_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_usb_2_0_extension_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1547</i>
	 */
	int libusb_get_usb_2_0_extension_descriptor(PointerByReference ctx, libusb_bos_dev_capability_descriptor dev_cap, libusb_usb_2_0_extension_descriptor.ByReference usb_2_0_extension[]);
	/**
	 * Original signature : <code>void libusb_free_usb_2_0_extension_descriptor(libusb_usb_2_0_extension_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1551</i>
	 */
	void libusb_free_usb_2_0_extension_descriptor(libusb_usb_2_0_extension_descriptor usb_2_0_extension);
	/**
	 * Original signature : <code>int libusb_get_ss_usb_device_capability_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_ss_usb_device_capability_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1553</i><br>
	 * @deprecated use the safer method {@link #libusb_get_ss_usb_device_capability_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_bos_dev_capability_descriptor, org.jayhsu.libuvc4java.jna.libusb_ss_usb_device_capability_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_ss_usb_device_capability_descriptor(Pointer ctx, libusb_bos_dev_capability_descriptor dev_cap, PointerByReference ss_usb_device_cap);
	/**
	 * Original signature : <code>int libusb_get_ss_usb_device_capability_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_ss_usb_device_capability_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1553</i>
	 */
	int libusb_get_ss_usb_device_capability_descriptor(PointerByReference ctx, libusb_bos_dev_capability_descriptor dev_cap, libusb_ss_usb_device_capability_descriptor.ByReference ss_usb_device_cap[]);
	/**
	 * Original signature : <code>void libusb_free_ss_usb_device_capability_descriptor(libusb_ss_usb_device_capability_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1557</i>
	 */
	void libusb_free_ss_usb_device_capability_descriptor(libusb_ss_usb_device_capability_descriptor ss_usb_device_cap);
	/**
	 * Original signature : <code>int libusb_get_container_id_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_container_id_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1559</i><br>
	 * @deprecated use the safer method {@link #libusb_get_container_id_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_bos_dev_capability_descriptor, org.jayhsu.libuvc4java.jna.libusb_container_id_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_container_id_descriptor(Pointer ctx, libusb_bos_dev_capability_descriptor dev_cap, PointerByReference container_id);
	/**
	 * Original signature : <code>int libusb_get_container_id_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_container_id_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1559</i>
	 */
	int libusb_get_container_id_descriptor(PointerByReference ctx, libusb_bos_dev_capability_descriptor dev_cap, libusb_container_id_descriptor.ByReference container_id[]);
	/**
	 * Original signature : <code>void libusb_free_container_id_descriptor(libusb_container_id_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1562</i>
	 */
	void libusb_free_container_id_descriptor(libusb_container_id_descriptor container_id);
	/**
	 * Original signature : <code>int libusb_get_platform_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_platform_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1564</i><br>
	 * @deprecated use the safer method {@link #libusb_get_platform_descriptor(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_bos_dev_capability_descriptor, org.jayhsu.libuvc4java.jna.libusb_platform_descriptor.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_platform_descriptor(Pointer ctx, libusb_bos_dev_capability_descriptor dev_cap, PointerByReference platform_descriptor);
	/**
	 * Original signature : <code>int libusb_get_platform_descriptor(libusb_context*, libusb_bos_dev_capability_descriptor*, libusb_platform_descriptor**)</code><br>
	 * <i>native declaration : include\libusb.h:1564</i>
	 */
	int libusb_get_platform_descriptor(PointerByReference ctx, libusb_bos_dev_capability_descriptor dev_cap, libusb_platform_descriptor.ByReference platform_descriptor[]);
	/**
	 * Original signature : <code>void libusb_free_platform_descriptor(libusb_platform_descriptor*)</code><br>
	 * <i>native declaration : include\libusb.h:1567</i>
	 */
	void libusb_free_platform_descriptor(libusb_platform_descriptor platform_descriptor);
	/**
	 * Original signature : <code>uint8_t libusb_get_bus_number(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1569</i><br>
	 * @deprecated use the safer method {@link #libusb_get_bus_number(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	byte libusb_get_bus_number(Pointer dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_bus_number(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1569</i>
	 */
	byte libusb_get_bus_number(PointerByReference dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_port_number(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1570</i><br>
	 * @deprecated use the safer method {@link #libusb_get_port_number(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	byte libusb_get_port_number(Pointer dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_port_number(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1570</i>
	 */
	byte libusb_get_port_number(PointerByReference dev);
	/**
	 * Original signature : <code>int libusb_get_port_numbers(libusb_device*, uint8_t*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1571</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_port_numbers(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, int)} and {@link #libusb_get_port_numbers(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int libusb_get_port_numbers(Pointer dev, Pointer port_numbers, int port_numbers_len);
	/**
	 * Original signature : <code>int libusb_get_port_numbers(libusb_device*, uint8_t*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1571</i>
	 */
	int libusb_get_port_numbers(PointerByReference dev, ByteBuffer port_numbers, int port_numbers_len);
	/**
	 * Original signature : <code>int libusb_get_port_numbers(libusb_device*, uint8_t*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1571</i>
	 */
	int libusb_get_port_numbers(PointerByReference dev, Pointer port_numbers, int port_numbers_len);
	/**
	 * Original signature : <code>int libusb_get_port_path(libusb_context*, libusb_device*, uint8_t*, uint8_t)</code><br>
	 * <i>native declaration : include\libusb.h:1573</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_port_path(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, byte)} and {@link #libusb_get_port_path(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, byte)} instead
	 */
	@Deprecated 
	int libusb_get_port_path(Pointer ctx, Pointer dev, Pointer path, byte path_length);
	/**
	 * Original signature : <code>int libusb_get_port_path(libusb_context*, libusb_device*, uint8_t*, uint8_t)</code><br>
	 * <i>native declaration : include\libusb.h:1573</i>
	 */
	int libusb_get_port_path(PointerByReference ctx, PointerByReference dev, ByteBuffer path, byte path_length);
	/**
	 * Original signature : <code>int libusb_get_port_path(libusb_context*, libusb_device*, uint8_t*, uint8_t)</code><br>
	 * <i>native declaration : include\libusb.h:1573</i>
	 */
	int libusb_get_port_path(PointerByReference ctx, PointerByReference dev, Pointer path, byte path_length);
	/**
	 * Original signature : <code>libusb_device* libusb_get_parent(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1574</i><br>
	 * @deprecated use the safer method {@link #libusb_get_parent(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference libusb_get_parent(Pointer dev);
	/**
	 * Original signature : <code>libusb_device* libusb_get_parent(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1574</i>
	 */
	PointerByReference libusb_get_parent(PointerByReference dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_device_address(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1575</i><br>
	 * @deprecated use the safer method {@link #libusb_get_device_address(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	byte libusb_get_device_address(Pointer dev);
	/**
	 * Original signature : <code>uint8_t libusb_get_device_address(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1575</i>
	 */
	byte libusb_get_device_address(PointerByReference dev);
	/**
	 * Original signature : <code>int libusb_get_device_speed(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1576</i><br>
	 * @deprecated use the safer method {@link #libusb_get_device_speed(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_get_device_speed(Pointer dev);
	/**
	 * Original signature : <code>int libusb_get_device_speed(libusb_device*)</code><br>
	 * <i>native declaration : include\libusb.h:1576</i>
	 */
	int libusb_get_device_speed(PointerByReference dev);
	/**
	 * Original signature : <code>int libusb_get_max_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1577</i><br>
	 * @deprecated use the safer method {@link #libusb_get_max_packet_size(com.sun.jna.ptr.PointerByReference, byte)} instead
	 */
	@Deprecated 
	int libusb_get_max_packet_size(Pointer dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1577</i>
	 */
	int libusb_get_max_packet_size(PointerByReference dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_iso_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1579</i><br>
	 * @deprecated use the safer method {@link #libusb_get_max_iso_packet_size(com.sun.jna.ptr.PointerByReference, byte)} instead
	 */
	@Deprecated 
	int libusb_get_max_iso_packet_size(Pointer dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_iso_packet_size(libusb_device*, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1579</i>
	 */
	int libusb_get_max_iso_packet_size(PointerByReference dev, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_alt_packet_size(libusb_device*, int, int, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1581</i><br>
	 * @deprecated use the safer method {@link #libusb_get_max_alt_packet_size(com.sun.jna.ptr.PointerByReference, int, int, byte)} instead
	 */
	@Deprecated 
	int libusb_get_max_alt_packet_size(Pointer dev, int interface_number, int alternate_setting, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_max_alt_packet_size(libusb_device*, int, int, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1581</i>
	 */
	int libusb_get_max_alt_packet_size(PointerByReference dev, int interface_number, int alternate_setting, byte endpoint);
	/**
	 * Original signature : <code>int libusb_get_interface_association_descriptors(libusb_device*, uint8_t, libusb_interface_association_descriptor_array**)</code><br>
	 * <i>native declaration : include\libusb.h:1584</i><br>
	 * @deprecated use the safer method {@link #libusb_get_interface_association_descriptors(com.sun.jna.ptr.PointerByReference, byte, org.jayhsu.libuvc4java.jna.libusb_interface_association_descriptor_array.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_interface_association_descriptors(Pointer dev, byte config_index, PointerByReference iad_array);
	/**
	 * Original signature : <code>int libusb_get_interface_association_descriptors(libusb_device*, uint8_t, libusb_interface_association_descriptor_array**)</code><br>
	 * <i>native declaration : include\libusb.h:1584</i>
	 */
	int libusb_get_interface_association_descriptors(PointerByReference dev, byte config_index, libusb_interface_association_descriptor_array.ByReference iad_array[]);
	/**
	 * Original signature : <code>int libusb_get_active_interface_association_descriptors(libusb_device*, libusb_interface_association_descriptor_array**)</code><br>
	 * <i>native declaration : include\libusb.h:1586</i><br>
	 * @deprecated use the safer method {@link #libusb_get_active_interface_association_descriptors(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.libusb_interface_association_descriptor_array.ByReference[])} instead
	 */
	@Deprecated 
	int libusb_get_active_interface_association_descriptors(Pointer dev, PointerByReference iad_array);
	/**
	 * Original signature : <code>int libusb_get_active_interface_association_descriptors(libusb_device*, libusb_interface_association_descriptor_array**)</code><br>
	 * <i>native declaration : include\libusb.h:1586</i>
	 */
	int libusb_get_active_interface_association_descriptors(PointerByReference dev, libusb_interface_association_descriptor_array.ByReference iad_array[]);
	/**
	 * Original signature : <code>void libusb_free_interface_association_descriptors(libusb_interface_association_descriptor_array*)</code><br>
	 * <i>native declaration : include\libusb.h:1588</i>
	 */
	void libusb_free_interface_association_descriptors(libusb_interface_association_descriptor_array iad_array);
	/**
	 * Original signature : <code>int libusb_wrap_sys_device(libusb_context*, intptr_t, libusb_device_handle**)</code><br>
	 * <i>native declaration : include\libusb.h:1591</i><br>
	 * @deprecated use the safer methods {@link #libusb_wrap_sys_device(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libusb_wrap_sys_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_wrap_sys_device(Pointer ctx, IntByReference sys_dev, PointerByReference dev_handle);
	/**
	 * Original signature : <code>int libusb_wrap_sys_device(libusb_context*, intptr_t, libusb_device_handle**)</code><br>
	 * <i>native declaration : include\libusb.h:1591</i>
	 */
	int libusb_wrap_sys_device(PointerByReference ctx, IntBuffer sys_dev, PointerByReference dev_handle);
	/**
	 * Original signature : <code>int libusb_wrap_sys_device(libusb_context*, intptr_t, libusb_device_handle**)</code><br>
	 * <i>native declaration : include\libusb.h:1591</i>
	 */
	int libusb_wrap_sys_device(PointerByReference ctx, IntByReference sys_dev, PointerByReference dev_handle);
	/**
	 * Original signature : <code>int libusb_open(libusb_device*, libusb_device_handle**)</code><br>
	 * <i>native declaration : include\libusb.h:1592</i><br>
	 * @deprecated use the safer method {@link #libusb_open(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_open(Pointer dev, PointerByReference dev_handle);
	/**
	 * Original signature : <code>int libusb_open(libusb_device*, libusb_device_handle**)</code><br>
	 * <i>native declaration : include\libusb.h:1592</i>
	 */
	int libusb_open(PointerByReference dev, PointerByReference dev_handle);
	/**
	 * Original signature : <code>void libusb_close(libusb_device_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:1593</i><br>
	 * @deprecated use the safer method {@link #libusb_close(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_close(Pointer dev_handle);
	/**
	 * Original signature : <code>void libusb_close(libusb_device_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:1593</i>
	 */
	void libusb_close(PointerByReference dev_handle);
	/**
	 * Original signature : <code>libusb_device* libusb_get_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:1594</i><br>
	 * @deprecated use the safer method {@link #libusb_get_device(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	PointerByReference libusb_get_device(Pointer dev_handle);
	/**
	 * Original signature : <code>libusb_device* libusb_get_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:1594</i>
	 */
	PointerByReference libusb_get_device(PointerByReference dev_handle);
	/**
	 * Original signature : <code>int libusb_set_configuration(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1596</i><br>
	 * @deprecated use the safer method {@link #libusb_set_configuration(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_set_configuration(Pointer dev_handle, int configuration);
	/**
	 * Original signature : <code>int libusb_set_configuration(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1596</i>
	 */
	int libusb_set_configuration(PointerByReference dev_handle, int configuration);
	/**
	 * Original signature : <code>int libusb_claim_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1598</i><br>
	 * @deprecated use the safer method {@link #libusb_claim_interface(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_claim_interface(Pointer dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_claim_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1598</i>
	 */
	int libusb_claim_interface(PointerByReference dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_release_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1600</i><br>
	 * @deprecated use the safer method {@link #libusb_release_interface(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_release_interface(Pointer dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_release_interface(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1600</i>
	 */
	int libusb_release_interface(PointerByReference dev_handle, int interface_number);
	/**
	 * Original signature : <code>libusb_device_handle* libusb_open_device_with_vid_pid(libusb_context*, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : include\libusb.h:1603</i><br>
	 * @deprecated use the safer method {@link #libusb_open_device_with_vid_pid(com.sun.jna.ptr.PointerByReference, short, short)} instead
	 */
	@Deprecated 
	PointerByReference libusb_open_device_with_vid_pid(Pointer ctx, short vendor_id, short product_id);
	/**
	 * Original signature : <code>libusb_device_handle* libusb_open_device_with_vid_pid(libusb_context*, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : include\libusb.h:1603</i>
	 */
	PointerByReference libusb_open_device_with_vid_pid(PointerByReference ctx, short vendor_id, short product_id);
	/**
	 * Original signature : <code>int libusb_set_interface_alt_setting(libusb_device_handle*, int, int)</code><br>
	 * <i>native declaration : include\libusb.h:1606</i><br>
	 * @deprecated use the safer method {@link #libusb_set_interface_alt_setting(com.sun.jna.ptr.PointerByReference, int, int)} instead
	 */
	@Deprecated 
	int libusb_set_interface_alt_setting(Pointer dev_handle, int interface_number, int alternate_setting);
	/**
	 * Original signature : <code>int libusb_set_interface_alt_setting(libusb_device_handle*, int, int)</code><br>
	 * <i>native declaration : include\libusb.h:1606</i>
	 */
	int libusb_set_interface_alt_setting(PointerByReference dev_handle, int interface_number, int alternate_setting);
	/**
	 * Original signature : <code>int libusb_clear_halt(libusb_device_handle*, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1608</i><br>
	 * @deprecated use the safer method {@link #libusb_clear_halt(com.sun.jna.ptr.PointerByReference, byte)} instead
	 */
	@Deprecated 
	int libusb_clear_halt(Pointer dev_handle, byte endpoint);
	/**
	 * Original signature : <code>int libusb_clear_halt(libusb_device_handle*, unsigned char)</code><br>
	 * <i>native declaration : include\libusb.h:1608</i>
	 */
	int libusb_clear_halt(PointerByReference dev_handle, byte endpoint);
	/**
	 * Original signature : <code>int libusb_reset_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:1610</i><br>
	 * @deprecated use the safer method {@link #libusb_reset_device(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_reset_device(Pointer dev_handle);
	/**
	 * Original signature : <code>int libusb_reset_device(libusb_device_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:1610</i>
	 */
	int libusb_reset_device(PointerByReference dev_handle);
	/**
	 * Original signature : <code>int libusb_alloc_streams(libusb_device_handle*, uint32_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1612</i><br>
	 * @deprecated use the safer methods {@link #libusb_alloc_streams(com.sun.jna.ptr.PointerByReference, int, java.nio.ByteBuffer, int)} and {@link #libusb_alloc_streams(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int libusb_alloc_streams(Pointer dev_handle, int num_streams, Pointer endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_alloc_streams(libusb_device_handle*, uint32_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1612</i>
	 */
	int libusb_alloc_streams(PointerByReference dev_handle, int num_streams, ByteBuffer endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_alloc_streams(libusb_device_handle*, uint32_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1612</i>
	 */
	int libusb_alloc_streams(PointerByReference dev_handle, int num_streams, Pointer endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_free_streams(libusb_device_handle*, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1614</i><br>
	 * @deprecated use the safer methods {@link #libusb_free_streams(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, int)} and {@link #libusb_free_streams(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int libusb_free_streams(Pointer dev_handle, Pointer endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_free_streams(libusb_device_handle*, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1614</i>
	 */
	int libusb_free_streams(PointerByReference dev_handle, ByteBuffer endpoints, int num_endpoints);
	/**
	 * Original signature : <code>int libusb_free_streams(libusb_device_handle*, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1614</i>
	 */
	int libusb_free_streams(PointerByReference dev_handle, Pointer endpoints, int num_endpoints);
	/**
	 * Original signature : <code>char* libusb_dev_mem_alloc(libusb_device_handle*, size_t)</code><br>
	 * <i>native declaration : include\libusb.h:1617</i><br>
	 * @deprecated use the safer method {@link #libusb_dev_mem_alloc(com.sun.jna.ptr.PointerByReference, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	Pointer libusb_dev_mem_alloc(Pointer dev_handle, NativeSize length);
	/**
	 * Original signature : <code>char* libusb_dev_mem_alloc(libusb_device_handle*, size_t)</code><br>
	 * <i>native declaration : include\libusb.h:1617</i>
	 */
	Pointer libusb_dev_mem_alloc(PointerByReference dev_handle, NativeSize length);
	/**
	 * Original signature : <code>int libusb_dev_mem_free(libusb_device_handle*, unsigned char*, size_t)</code><br>
	 * <i>native declaration : include\libusb.h:1619</i><br>
	 * @deprecated use the safer methods {@link #libusb_dev_mem_free(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, com.ochafik.lang.jnaerator.runtime.NativeSize)} and {@link #libusb_dev_mem_free(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.ochafik.lang.jnaerator.runtime.NativeSize)} instead
	 */
	@Deprecated 
	int libusb_dev_mem_free(Pointer dev_handle, Pointer buffer, NativeSize length);
	/**
	 * Original signature : <code>int libusb_dev_mem_free(libusb_device_handle*, unsigned char*, size_t)</code><br>
	 * <i>native declaration : include\libusb.h:1619</i>
	 */
	int libusb_dev_mem_free(PointerByReference dev_handle, ByteBuffer buffer, NativeSize length);
	/**
	 * Original signature : <code>int libusb_dev_mem_free(libusb_device_handle*, unsigned char*, size_t)</code><br>
	 * <i>native declaration : include\libusb.h:1619</i>
	 */
	int libusb_dev_mem_free(PointerByReference dev_handle, Pointer buffer, NativeSize length);
	/**
	 * Original signature : <code>int libusb_kernel_driver_active(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1622</i><br>
	 * @deprecated use the safer method {@link #libusb_kernel_driver_active(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_kernel_driver_active(Pointer dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_kernel_driver_active(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1622</i>
	 */
	int libusb_kernel_driver_active(PointerByReference dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1624</i><br>
	 * @deprecated use the safer method {@link #libusb_detach_kernel_driver(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_detach_kernel_driver(Pointer dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1624</i>
	 */
	int libusb_detach_kernel_driver(PointerByReference dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_attach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1626</i><br>
	 * @deprecated use the safer method {@link #libusb_attach_kernel_driver(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_attach_kernel_driver(Pointer dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_attach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1626</i>
	 */
	int libusb_attach_kernel_driver(PointerByReference dev_handle, int interface_number);
	/**
	 * Original signature : <code>int libusb_set_auto_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1628</i><br>
	 * @deprecated use the safer method {@link #libusb_set_auto_detach_kernel_driver(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	int libusb_set_auto_detach_kernel_driver(Pointer dev_handle, int enable);
	/**
	 * Original signature : <code>int libusb_set_auto_detach_kernel_driver(libusb_device_handle*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1628</i>
	 */
	int libusb_set_auto_detach_kernel_driver(PointerByReference dev_handle, int enable);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Get the data section of a control transfer. This convenience function is here<br>
	 * to remind you that the data does not start until 8 bytes into the actual<br>
	 * buffer, as the setup packet comes first.<br>
	 * Calling this function only makes sense from a transfer callback function,<br>
	 * or situations where you have already allocated a suitably sized buffer at<br>
	 * transfer->buffer.<br>
	 * \param transfer a transfer<br>
	 * \returns pointer to the first byte of the data section<br>
	 * Original signature : <code>char* libusb_control_transfer_get_data(libusb_transfer*)</code><br>
	 * <i>native declaration : include\libusb.h:1645</i>
	 */
	Pointer libusb_control_transfer_get_data(libusb_transfer transfer);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Get the control setup packet of a control transfer. This convenience<br>
	 * function is here to remind you that the control setup occupies the first<br>
	 * 8 bytes of the transfer data buffer.<br>
	 * Calling this function only makes sense from a transfer callback function,<br>
	 * or situations where you have already allocated a suitably sized buffer at<br>
	 * transfer->buffer.<br>
	 * \param transfer a transfer<br>
	 * \returns a casted pointer to the start of the transfer data buffer<br>
	 * Original signature : <code>libusb_control_setup* libusb_control_transfer_get_setup(libusb_transfer*)</code><br>
	 * <i>native declaration : include\libusb.h:1663</i>
	 */
	libusb_control_setup libusb_control_transfer_get_setup(libusb_transfer transfer);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the setup packet (first 8 bytes of the data<br>
	 * buffer) for a control transfer. The wIndex, wValue and wLength values should<br>
	 * be given in host-endian byte order.<br>
	 * \param buffer buffer to output the setup packet into<br>
	 * This pointer must be aligned to at least 2 bytes boundary.<br>
	 * \param bmRequestType see the<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param bRequest see the<br>
	 * \ref libusb_control_setup::bRequest "bRequest" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param wValue see the<br>
	 * \ref libusb_control_setup::wValue "wValue" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param wIndex see the<br>
	 * \ref libusb_control_setup::wIndex "wIndex" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param wLength see the<br>
	 * \ref libusb_control_setup::wLength "wLength" field of<br>
	 * \ref libusb_control_setup<br>
	 * Original signature : <code>void libusb_fill_control_setup(unsigned char*, uint8_t, uint8_t, uint16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : include\libusb.h:1692</i><br>
	 * @deprecated use the safer methods {@link #libusb_fill_control_setup(java.nio.ByteBuffer, byte, byte, short, short, short)} and {@link #libusb_fill_control_setup(com.sun.jna.Pointer, byte, byte, short, short, short)} instead
	 */
	@Deprecated 
	void libusb_fill_control_setup(Pointer buffer, byte bmRequestType, byte bRequest, short wValue, short wIndex, short wLength);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the setup packet (first 8 bytes of the data<br>
	 * buffer) for a control transfer. The wIndex, wValue and wLength values should<br>
	 * be given in host-endian byte order.<br>
	 * \param buffer buffer to output the setup packet into<br>
	 * This pointer must be aligned to at least 2 bytes boundary.<br>
	 * \param bmRequestType see the<br>
	 * \ref libusb_control_setup::bmRequestType "bmRequestType" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param bRequest see the<br>
	 * \ref libusb_control_setup::bRequest "bRequest" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param wValue see the<br>
	 * \ref libusb_control_setup::wValue "wValue" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param wIndex see the<br>
	 * \ref libusb_control_setup::wIndex "wIndex" field of<br>
	 * \ref libusb_control_setup<br>
	 * \param wLength see the<br>
	 * \ref libusb_control_setup::wLength "wLength" field of<br>
	 * \ref libusb_control_setup<br>
	 * Original signature : <code>void libusb_fill_control_setup(unsigned char*, uint8_t, uint8_t, uint16_t, uint16_t, uint16_t)</code><br>
	 * <i>native declaration : include\libusb.h:1692</i>
	 */
	void libusb_fill_control_setup(ByteBuffer buffer, byte bmRequestType, byte bRequest, short wValue, short wIndex, short wLength);
	/**
	 * Original signature : <code>libusb_transfer* libusb_alloc_transfer(int)</code><br>
	 * <i>native declaration : include\libusb.h:1704</i>
	 */
	libusb_transfer libusb_alloc_transfer(int iso_packets);
	/**
	 * Original signature : <code>int libusb_submit_transfer(libusb_transfer*)</code><br>
	 * <i>native declaration : include\libusb.h:1705</i>
	 */
	int libusb_submit_transfer(libusb_transfer transfer);
	/**
	 * Original signature : <code>int libusb_cancel_transfer(libusb_transfer*)</code><br>
	 * <i>native declaration : include\libusb.h:1706</i>
	 */
	int libusb_cancel_transfer(libusb_transfer transfer);
	/**
	 * Original signature : <code>void libusb_free_transfer(libusb_transfer*)</code><br>
	 * <i>native declaration : include\libusb.h:1707</i>
	 */
	void libusb_free_transfer(libusb_transfer transfer);
	/**
	 * Original signature : <code>void libusb_transfer_set_stream_id(libusb_transfer*, uint32_t)</code><br>
	 * <i>native declaration : include\libusb.h:1708</i>
	 */
	void libusb_transfer_set_stream_id(libusb_transfer transfer, int stream_id);
	/**
	 * Original signature : <code>uint32_t libusb_transfer_get_stream_id(libusb_transfer*)</code><br>
	 * <i>native declaration : include\libusb.h:1710</i>
	 */
	int libusb_transfer_get_stream_id(libusb_transfer transfer);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a control transfer.<br>
	 * If you pass a transfer buffer to this function, the first 8 bytes will<br>
	 * be interpreted as a control setup packet, and the wLength field will be<br>
	 * used to automatically populate the \ref libusb_transfer::length "length"<br>
	 * field of the transfer. Therefore the recommended approach is:<br>
	 * -# Allocate a suitably sized data buffer (including space for control setup)<br>
	 * -# Call libusb_fill_control_setup()<br>
	 * -# If this is a host-to-device transfer with a data stage, put the data<br>
	 *    in place after the setup packet<br>
	 * -# Call this function<br>
	 * -# Call libusb_submit_transfer()<br>
	 * It is also legal to pass a NULL buffer to this function, in which case this<br>
	 * function will not attempt to populate the length field. Remember that you<br>
	 * must then populate the buffer and length fields later.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param buffer data buffer. If provided, this function will interpret the<br>
	 * first 8 bytes as a setup packet and infer the transfer length from that.<br>
	 * This pointer must be aligned to at least 2 bytes boundary.<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_control_transfer(libusb_transfer*, libusb_device_handle*, unsigned char*, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1741</i><br>
	 * @deprecated use the safer methods {@link #libusb_fill_control_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} and {@link #libusb_fill_control_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void libusb_fill_control_transfer(libusb_transfer transfer, Pointer dev_handle, Pointer buffer, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a control transfer.<br>
	 * If you pass a transfer buffer to this function, the first 8 bytes will<br>
	 * be interpreted as a control setup packet, and the wLength field will be<br>
	 * used to automatically populate the \ref libusb_transfer::length "length"<br>
	 * field of the transfer. Therefore the recommended approach is:<br>
	 * -# Allocate a suitably sized data buffer (including space for control setup)<br>
	 * -# Call libusb_fill_control_setup()<br>
	 * -# If this is a host-to-device transfer with a data stage, put the data<br>
	 *    in place after the setup packet<br>
	 * -# Call this function<br>
	 * -# Call libusb_submit_transfer()<br>
	 * It is also legal to pass a NULL buffer to this function, in which case this<br>
	 * function will not attempt to populate the length field. Remember that you<br>
	 * must then populate the buffer and length fields later.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param buffer data buffer. If provided, this function will interpret the<br>
	 * first 8 bytes as a setup packet and infer the transfer length from that.<br>
	 * This pointer must be aligned to at least 2 bytes boundary.<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_control_transfer(libusb_transfer*, libusb_device_handle*, unsigned char*, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1741</i>
	 */
	void libusb_fill_control_transfer(libusb_transfer transfer, PointerByReference dev_handle, ByteBuffer buffer, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a control transfer.<br>
	 * If you pass a transfer buffer to this function, the first 8 bytes will<br>
	 * be interpreted as a control setup packet, and the wLength field will be<br>
	 * used to automatically populate the \ref libusb_transfer::length "length"<br>
	 * field of the transfer. Therefore the recommended approach is:<br>
	 * -# Allocate a suitably sized data buffer (including space for control setup)<br>
	 * -# Call libusb_fill_control_setup()<br>
	 * -# If this is a host-to-device transfer with a data stage, put the data<br>
	 *    in place after the setup packet<br>
	 * -# Call this function<br>
	 * -# Call libusb_submit_transfer()<br>
	 * It is also legal to pass a NULL buffer to this function, in which case this<br>
	 * function will not attempt to populate the length field. Remember that you<br>
	 * must then populate the buffer and length fields later.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param buffer data buffer. If provided, this function will interpret the<br>
	 * first 8 bytes as a setup packet and infer the transfer length from that.<br>
	 * This pointer must be aligned to at least 2 bytes boundary.<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_control_transfer(libusb_transfer*, libusb_device_handle*, unsigned char*, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1741</i>
	 */
	void libusb_fill_control_transfer(libusb_transfer transfer, PointerByReference dev_handle, Pointer buffer, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a bulk transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1772</i><br>
	 * @deprecated use the safer methods {@link #libusb_fill_bulk_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, java.nio.ByteBuffer, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} and {@link #libusb_fill_bulk_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, com.sun.jna.Pointer, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void libusb_fill_bulk_transfer(libusb_transfer transfer, Pointer dev_handle, byte endpoint, Pointer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a bulk transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1772</i>
	 */
	void libusb_fill_bulk_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, ByteBuffer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a bulk transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1772</i>
	 */
	void libusb_fill_bulk_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, Pointer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a bulk transfer using bulk streams.<br>
	 * Since version 1.0.19, \ref LIBUSB_API_VERSION >= 0x01000103<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param stream_id bulk stream id for this transfer<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_stream_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, uint32_t, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1803</i><br>
	 * @deprecated use the safer methods {@link #libusb_fill_bulk_stream_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, int, java.nio.ByteBuffer, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} and {@link #libusb_fill_bulk_stream_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, int, com.sun.jna.Pointer, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void libusb_fill_bulk_stream_transfer(libusb_transfer transfer, Pointer dev_handle, byte endpoint, int stream_id, Pointer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a bulk transfer using bulk streams.<br>
	 * Since version 1.0.19, \ref LIBUSB_API_VERSION >= 0x01000103<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param stream_id bulk stream id for this transfer<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_stream_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, uint32_t, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1803</i>
	 */
	void libusb_fill_bulk_stream_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, int stream_id, ByteBuffer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for a bulk transfer using bulk streams.<br>
	 * Since version 1.0.19, \ref LIBUSB_API_VERSION >= 0x01000103<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param stream_id bulk stream id for this transfer<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_bulk_stream_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, uint32_t, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1803</i>
	 */
	void libusb_fill_bulk_stream_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, int stream_id, Pointer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for an interrupt transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_interrupt_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1828</i><br>
	 * @deprecated use the safer methods {@link #libusb_fill_interrupt_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, java.nio.ByteBuffer, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} and {@link #libusb_fill_interrupt_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, com.sun.jna.Pointer, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void libusb_fill_interrupt_transfer(libusb_transfer transfer, Pointer dev_handle, byte endpoint, Pointer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for an interrupt transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_interrupt_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1828</i>
	 */
	void libusb_fill_interrupt_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, ByteBuffer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for an interrupt transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_interrupt_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1828</i>
	 */
	void libusb_fill_interrupt_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, Pointer buffer, int length, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for an isochronous transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param num_iso_packets the number of isochronous packets<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_iso_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1857</i><br>
	 * @deprecated use the safer methods {@link #libusb_fill_iso_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, java.nio.ByteBuffer, int, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} and {@link #libusb_fill_iso_transfer(org.jayhsu.libuvc4java.jna.libusb_transfer, com.sun.jna.ptr.PointerByReference, byte, com.sun.jna.Pointer, int, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_transfer_cb_fn, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void libusb_fill_iso_transfer(libusb_transfer transfer, Pointer dev_handle, byte endpoint, Pointer buffer, int length, int num_iso_packets, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for an isochronous transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param num_iso_packets the number of isochronous packets<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_iso_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1857</i>
	 */
	void libusb_fill_iso_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, ByteBuffer buffer, int length, int num_iso_packets, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Helper function to populate the required \ref libusb_transfer fields<br>
	 * for an isochronous transfer.<br>
	 * \param transfer the transfer to populate<br>
	 * \param dev_handle handle of the device that will handle the transfer<br>
	 * \param endpoint address of the endpoint where this transfer will be sent<br>
	 * \param buffer data buffer<br>
	 * \param length length of data buffer<br>
	 * \param num_iso_packets the number of isochronous packets<br>
	 * \param callback callback function to be invoked on transfer completion<br>
	 * \param user_data user data to pass to callback function<br>
	 * \param timeout timeout for the transfer in milliseconds<br>
	 * Original signature : <code>void libusb_fill_iso_transfer(libusb_transfer*, libusb_device_handle*, unsigned char, unsigned char*, int, int, libusb_transfer_cb_fn, void*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1857</i>
	 */
	void libusb_fill_iso_transfer(libusb_transfer transfer, PointerByReference dev_handle, byte endpoint, Pointer buffer, int length, int num_iso_packets, LibusbLibrary.libusb_transfer_cb_fn callback, Pointer user_data, int timeout);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Convenience function to set the length of all packets in an isochronous<br>
	 * transfer, based on the num_iso_packets field in the transfer structure.<br>
	 * \param transfer a transfer<br>
	 * \param length the length to set in each isochronous packet descriptor<br>
	 * \see libusb_get_max_packet_size()<br>
	 * Original signature : <code>void libusb_set_iso_packet_lengths(libusb_transfer*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1881</i>
	 */
	void libusb_set_iso_packet_lengths(libusb_transfer transfer, int length);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Convenience function to locate the position of an isochronous packet<br>
	 * within the buffer of an isochronous transfer.<br>
	 * This is a thorough function which loops through all preceding packets,<br>
	 * accumulating their lengths to find the position of the specified packet.<br>
	 * Typically you will assign equal lengths to each packet in the transfer,<br>
	 * and hence the above method is sub-optimal. You may wish to use<br>
	 * libusb_get_iso_packet_buffer_simple() instead.<br>
	 * \param transfer a transfer<br>
	 * \param packet the packet to return the address of<br>
	 * \returns the base address of the packet buffer inside the transfer buffer,<br>
	 * or NULL if the packet does not exist.<br>
	 * \see libusb_get_iso_packet_buffer_simple()<br>
	 * Original signature : <code>char* libusb_get_iso_packet_buffer(libusb_transfer*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1906</i>
	 */
	Pointer libusb_get_iso_packet_buffer(libusb_transfer transfer, int packet);
	/**
	 * \ingroup libusb_asyncio<br>
	 * Convenience function to locate the position of an isochronous packet<br>
	 * within the buffer of an isochronous transfer, for transfers where each<br>
	 * packet is of identical size.<br>
	 * This function relies on the assumption that every packet within the transfer<br>
	 * is of identical size to the first packet. Calculating the location of<br>
	 * the packet buffer is then just a simple calculation:<br>
	 * <tt>buffer + (packet_size * packet)</tt><br>
	 * Do not use this function on transfers other than those that have identical<br>
	 * packet lengths for each packet.<br>
	 * \param transfer a transfer<br>
	 * \param packet the packet to return the address of<br>
	 * \returns the base address of the packet buffer inside the transfer buffer,<br>
	 * or NULL if the packet does not exist.<br>
	 * \see libusb_get_iso_packet_buffer()<br>
	 * Original signature : <code>char* libusb_get_iso_packet_buffer_simple(libusb_transfer*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1948</i>
	 */
	Pointer libusb_get_iso_packet_buffer_simple(libusb_transfer transfer, int packet);
	/**
	 * sync I/O<br>
	 * Original signature : <code>int libusb_control_transfer(libusb_device_handle*, uint8_t, uint8_t, uint16_t, uint16_t, unsigned char*, uint16_t, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1968</i><br>
	 * @deprecated use the safer methods {@link #libusb_control_transfer(com.sun.jna.ptr.PointerByReference, byte, byte, short, short, java.nio.ByteBuffer, short, int)} and {@link #libusb_control_transfer(com.sun.jna.ptr.PointerByReference, byte, byte, short, short, com.sun.jna.Pointer, short, int)} instead
	 */
	@Deprecated 
	int libusb_control_transfer(Pointer dev_handle, byte request_type, byte bRequest, short wValue, short wIndex, Pointer data, short wLength, int timeout);
	/**
	 * sync I/O<br>
	 * Original signature : <code>int libusb_control_transfer(libusb_device_handle*, uint8_t, uint8_t, uint16_t, uint16_t, unsigned char*, uint16_t, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1968</i>
	 */
	int libusb_control_transfer(PointerByReference dev_handle, byte request_type, byte bRequest, short wValue, short wIndex, ByteBuffer data, short wLength, int timeout);
	/**
	 * sync I/O<br>
	 * Original signature : <code>int libusb_control_transfer(libusb_device_handle*, uint8_t, uint8_t, uint16_t, uint16_t, unsigned char*, uint16_t, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1968</i>
	 */
	int libusb_control_transfer(PointerByReference dev_handle, byte request_type, byte bRequest, short wValue, short wIndex, Pointer data, short wLength, int timeout);
	/**
	 * Original signature : <code>int libusb_bulk_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1972</i><br>
	 * @deprecated use the safer methods {@link #libusb_bulk_transfer(com.sun.jna.ptr.PointerByReference, byte, java.nio.ByteBuffer, int, java.nio.IntBuffer, int)} and {@link #libusb_bulk_transfer(com.sun.jna.ptr.PointerByReference, byte, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int libusb_bulk_transfer(Pointer dev_handle, byte endpoint, Pointer data, int length, IntByReference actual_length, int timeout);
	/**
	 * Original signature : <code>int libusb_bulk_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1972</i>
	 */
	int libusb_bulk_transfer(PointerByReference dev_handle, byte endpoint, ByteBuffer data, int length, IntBuffer actual_length, int timeout);
	/**
	 * Original signature : <code>int libusb_bulk_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1972</i>
	 */
	int libusb_bulk_transfer(PointerByReference dev_handle, byte endpoint, Pointer data, int length, IntByReference actual_length, int timeout);
	/**
	 * Original signature : <code>int libusb_interrupt_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1976</i><br>
	 * @deprecated use the safer methods {@link #libusb_interrupt_transfer(com.sun.jna.ptr.PointerByReference, byte, java.nio.ByteBuffer, int, java.nio.IntBuffer, int)} and {@link #libusb_interrupt_transfer(com.sun.jna.ptr.PointerByReference, byte, com.sun.jna.Pointer, int, com.sun.jna.ptr.IntByReference, int)} instead
	 */
	@Deprecated 
	int libusb_interrupt_transfer(Pointer dev_handle, byte endpoint, Pointer data, int length, IntByReference actual_length, int timeout);
	/**
	 * Original signature : <code>int libusb_interrupt_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1976</i>
	 */
	int libusb_interrupt_transfer(PointerByReference dev_handle, byte endpoint, ByteBuffer data, int length, IntBuffer actual_length, int timeout);
	/**
	 * Original signature : <code>int libusb_interrupt_transfer(libusb_device_handle*, unsigned char, unsigned char*, int, int*, unsigned int)</code><br>
	 * <i>native declaration : include\libusb.h:1976</i>
	 */
	int libusb_interrupt_transfer(PointerByReference dev_handle, byte endpoint, Pointer data, int length, IntByReference actual_length, int timeout);
	/**
	 * \ingroup libusb_desc<br>
	 * Retrieve a descriptor from the default control pipe.<br>
	 * This is a convenience function which formulates the appropriate control<br>
	 * message to retrieve the descriptor.<br>
	 * \param dev_handle a device handle<br>
	 * \param desc_type the descriptor type, see \ref libusb_descriptor_type<br>
	 * \param desc_index the index of the descriptor to retrieve<br>
	 * \param data output buffer for descriptor<br>
	 * \param length size of data buffer<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_get_descriptor(libusb_device_handle*, uint8_t, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1992</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_descriptor(com.sun.jna.ptr.PointerByReference, byte, byte, java.nio.ByteBuffer, int)} and {@link #libusb_get_descriptor(com.sun.jna.ptr.PointerByReference, byte, byte, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int libusb_get_descriptor(Pointer dev_handle, byte desc_type, byte desc_index, Pointer data, int length);
	/**
	 * \ingroup libusb_desc<br>
	 * Retrieve a descriptor from the default control pipe.<br>
	 * This is a convenience function which formulates the appropriate control<br>
	 * message to retrieve the descriptor.<br>
	 * \param dev_handle a device handle<br>
	 * \param desc_type the descriptor type, see \ref libusb_descriptor_type<br>
	 * \param desc_index the index of the descriptor to retrieve<br>
	 * \param data output buffer for descriptor<br>
	 * \param length size of data buffer<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_get_descriptor(libusb_device_handle*, uint8_t, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1992</i>
	 */
	int libusb_get_descriptor(PointerByReference dev_handle, byte desc_type, byte desc_index, ByteBuffer data, int length);
	/**
	 * \ingroup libusb_desc<br>
	 * Retrieve a descriptor from the default control pipe.<br>
	 * This is a convenience function which formulates the appropriate control<br>
	 * message to retrieve the descriptor.<br>
	 * \param dev_handle a device handle<br>
	 * \param desc_type the descriptor type, see \ref libusb_descriptor_type<br>
	 * \param desc_index the index of the descriptor to retrieve<br>
	 * \param data output buffer for descriptor<br>
	 * \param length size of data buffer<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_get_descriptor(libusb_device_handle*, uint8_t, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:1992</i>
	 */
	int libusb_get_descriptor(PointerByReference dev_handle, byte desc_type, byte desc_index, Pointer data, int length);
	/**
	 * \ingroup libusb_desc<br>
	 * Retrieve a descriptor from a device.<br>
	 * This is a convenience function which formulates the appropriate control<br>
	 * message to retrieve the descriptor. The string returned is Unicode, as<br>
	 * detailed in the USB specifications.<br>
	 * \param dev_handle a device handle<br>
	 * \param desc_index the index of the descriptor to retrieve<br>
	 * \param langid the language ID for the string descriptor<br>
	 * \param data output buffer for descriptor<br>
	 * \param length size of data buffer<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * \see libusb_get_string_descriptor_ascii()<br>
	 * Original signature : <code>int libusb_get_string_descriptor(libusb_device_handle*, uint8_t, uint16_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:2014</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_string_descriptor(com.sun.jna.ptr.PointerByReference, byte, short, java.nio.ByteBuffer, int)} and {@link #libusb_get_string_descriptor(com.sun.jna.ptr.PointerByReference, byte, short, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int libusb_get_string_descriptor(Pointer dev_handle, byte desc_index, short langid, Pointer data, int length);
	/**
	 * \ingroup libusb_desc<br>
	 * Retrieve a descriptor from a device.<br>
	 * This is a convenience function which formulates the appropriate control<br>
	 * message to retrieve the descriptor. The string returned is Unicode, as<br>
	 * detailed in the USB specifications.<br>
	 * \param dev_handle a device handle<br>
	 * \param desc_index the index of the descriptor to retrieve<br>
	 * \param langid the language ID for the string descriptor<br>
	 * \param data output buffer for descriptor<br>
	 * \param length size of data buffer<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * \see libusb_get_string_descriptor_ascii()<br>
	 * Original signature : <code>int libusb_get_string_descriptor(libusb_device_handle*, uint8_t, uint16_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:2014</i>
	 */
	int libusb_get_string_descriptor(PointerByReference dev_handle, byte desc_index, short langid, ByteBuffer data, int length);
	/**
	 * \ingroup libusb_desc<br>
	 * Retrieve a descriptor from a device.<br>
	 * This is a convenience function which formulates the appropriate control<br>
	 * message to retrieve the descriptor. The string returned is Unicode, as<br>
	 * detailed in the USB specifications.<br>
	 * \param dev_handle a device handle<br>
	 * \param desc_index the index of the descriptor to retrieve<br>
	 * \param langid the language ID for the string descriptor<br>
	 * \param data output buffer for descriptor<br>
	 * \param length size of data buffer<br>
	 * \returns number of bytes returned in data, or LIBUSB_ERROR code on failure<br>
	 * \see libusb_get_string_descriptor_ascii()<br>
	 * Original signature : <code>int libusb_get_string_descriptor(libusb_device_handle*, uint8_t, uint16_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:2014</i>
	 */
	int libusb_get_string_descriptor(PointerByReference dev_handle, byte desc_index, short langid, Pointer data, int length);
	/**
	 * Original signature : <code>int libusb_get_string_descriptor_ascii(libusb_device_handle*, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:2022</i><br>
	 * @deprecated use the safer methods {@link #libusb_get_string_descriptor_ascii(com.sun.jna.ptr.PointerByReference, byte, java.nio.ByteBuffer, int)} and {@link #libusb_get_string_descriptor_ascii(com.sun.jna.ptr.PointerByReference, byte, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int libusb_get_string_descriptor_ascii(Pointer dev_handle, byte desc_index, Pointer data, int length);
	/**
	 * Original signature : <code>int libusb_get_string_descriptor_ascii(libusb_device_handle*, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:2022</i>
	 */
	int libusb_get_string_descriptor_ascii(PointerByReference dev_handle, byte desc_index, ByteBuffer data, int length);
	/**
	 * Original signature : <code>int libusb_get_string_descriptor_ascii(libusb_device_handle*, uint8_t, unsigned char*, int)</code><br>
	 * <i>native declaration : include\libusb.h:2022</i>
	 */
	int libusb_get_string_descriptor_ascii(PointerByReference dev_handle, byte desc_index, Pointer data, int length);
	/**
	 * polling and timeouts<br>
	 * Original signature : <code>int libusb_try_lock_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2027</i><br>
	 * @deprecated use the safer method {@link #libusb_try_lock_events(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_try_lock_events(Pointer ctx);
	/**
	 * polling and timeouts<br>
	 * Original signature : <code>int libusb_try_lock_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2027</i>
	 */
	int libusb_try_lock_events(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_lock_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2028</i><br>
	 * @deprecated use the safer method {@link #libusb_lock_events(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_lock_events(Pointer ctx);
	/**
	 * Original signature : <code>void libusb_lock_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2028</i>
	 */
	void libusb_lock_events(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_unlock_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2029</i><br>
	 * @deprecated use the safer method {@link #libusb_unlock_events(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_unlock_events(Pointer ctx);
	/**
	 * Original signature : <code>void libusb_unlock_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2029</i>
	 */
	void libusb_unlock_events(PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_event_handling_ok(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2030</i><br>
	 * @deprecated use the safer method {@link #libusb_event_handling_ok(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_event_handling_ok(Pointer ctx);
	/**
	 * Original signature : <code>int libusb_event_handling_ok(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2030</i>
	 */
	int libusb_event_handling_ok(PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_event_handler_active(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2031</i><br>
	 * @deprecated use the safer method {@link #libusb_event_handler_active(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_event_handler_active(Pointer ctx);
	/**
	 * Original signature : <code>int libusb_event_handler_active(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2031</i>
	 */
	int libusb_event_handler_active(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_interrupt_event_handler(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2032</i><br>
	 * @deprecated use the safer method {@link #libusb_interrupt_event_handler(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_interrupt_event_handler(Pointer ctx);
	/**
	 * Original signature : <code>void libusb_interrupt_event_handler(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2032</i>
	 */
	void libusb_interrupt_event_handler(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_lock_event_waiters(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2033</i><br>
	 * @deprecated use the safer method {@link #libusb_lock_event_waiters(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_lock_event_waiters(Pointer ctx);
	/**
	 * Original signature : <code>void libusb_lock_event_waiters(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2033</i>
	 */
	void libusb_lock_event_waiters(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_unlock_event_waiters(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2034</i><br>
	 * @deprecated use the safer method {@link #libusb_unlock_event_waiters(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void libusb_unlock_event_waiters(Pointer ctx);
	/**
	 * Original signature : <code>void libusb_unlock_event_waiters(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2034</i>
	 */
	void libusb_unlock_event_waiters(PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_wait_for_event(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2035</i><br>
	 * @deprecated use the safer method {@link #libusb_wait_for_event(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval)} instead
	 */
	@Deprecated 
	int libusb_wait_for_event(Pointer ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_wait_for_event(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2035</i>
	 */
	int libusb_wait_for_event(PointerByReference ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2037</i><br>
	 * @deprecated use the safer method {@link #libusb_handle_events_timeout(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval)} instead
	 */
	@Deprecated 
	int libusb_handle_events_timeout(Pointer ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2037</i>
	 */
	int libusb_handle_events_timeout(PointerByReference ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout_completed(libusb_context*, timeval*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:2039</i><br>
	 * @deprecated use the safer methods {@link #libusb_handle_events_timeout_completed(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval, java.nio.IntBuffer)} and {@link #libusb_handle_events_timeout_completed(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int libusb_handle_events_timeout_completed(Pointer ctx, timeval tv, IntByReference completed);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout_completed(libusb_context*, timeval*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:2039</i>
	 */
	int libusb_handle_events_timeout_completed(PointerByReference ctx, timeval tv, IntBuffer completed);
	/**
	 * Original signature : <code>int libusb_handle_events_timeout_completed(libusb_context*, timeval*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:2039</i>
	 */
	int libusb_handle_events_timeout_completed(PointerByReference ctx, timeval tv, IntByReference completed);
	/**
	 * Original signature : <code>int libusb_handle_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2041</i><br>
	 * @deprecated use the safer method {@link #libusb_handle_events(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_handle_events(Pointer ctx);
	/**
	 * Original signature : <code>int libusb_handle_events(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2041</i>
	 */
	int libusb_handle_events(PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_handle_events_completed(libusb_context*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:2042</i><br>
	 * @deprecated use the safer methods {@link #libusb_handle_events_completed(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer)} and {@link #libusb_handle_events_completed(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int libusb_handle_events_completed(Pointer ctx, IntByReference completed);
	/**
	 * Original signature : <code>int libusb_handle_events_completed(libusb_context*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:2042</i>
	 */
	int libusb_handle_events_completed(PointerByReference ctx, IntBuffer completed);
	/**
	 * Original signature : <code>int libusb_handle_events_completed(libusb_context*, int*)</code><br>
	 * <i>native declaration : include\libusb.h:2042</i>
	 */
	int libusb_handle_events_completed(PointerByReference ctx, IntByReference completed);
	/**
	 * Original signature : <code>int libusb_handle_events_locked(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2043</i><br>
	 * @deprecated use the safer method {@link #libusb_handle_events_locked(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval)} instead
	 */
	@Deprecated 
	int libusb_handle_events_locked(Pointer ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_handle_events_locked(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2043</i>
	 */
	int libusb_handle_events_locked(PointerByReference ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_pollfds_handle_timeouts(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2045</i><br>
	 * @deprecated use the safer method {@link #libusb_pollfds_handle_timeouts(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	int libusb_pollfds_handle_timeouts(Pointer ctx);
	/**
	 * Original signature : <code>int libusb_pollfds_handle_timeouts(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2045</i>
	 */
	int libusb_pollfds_handle_timeouts(PointerByReference ctx);
	/**
	 * Original signature : <code>int libusb_get_next_timeout(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2046</i><br>
	 * @deprecated use the safer method {@link #libusb_get_next_timeout(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibuvcLibrary.timeval)} instead
	 */
	@Deprecated 
	int libusb_get_next_timeout(Pointer ctx, timeval tv);
	/**
	 * Original signature : <code>int libusb_get_next_timeout(libusb_context*, timeval*)</code><br>
	 * <i>native declaration : include\libusb.h:2046</i>
	 */
	int libusb_get_next_timeout(PointerByReference ctx, timeval tv);
	/**
	 * Original signature : <code>libusb_pollfd** libusb_get_pollfds(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2087</i><br>
	 * @deprecated use the safer method {@link #libusb_get_pollfds(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	org.jayhsu.libuvc4java.jna.libusb_pollfd.ByReference[] libusb_get_pollfds(Pointer ctx);
	/**
	 * Original signature : <code>libusb_pollfd** libusb_get_pollfds(libusb_context*)</code><br>
	 * <i>native declaration : include\libusb.h:2087</i>
	 */
	org.jayhsu.libuvc4java.jna.libusb_pollfd.ByReference[] libusb_get_pollfds(PointerByReference ctx);
	/**
	 * Original signature : <code>void libusb_free_pollfds(libusb_pollfd**)</code><br>
	 * <i>native declaration : include\libusb.h:2089</i><br>
	 * @deprecated use the safer method {@link #libusb_free_pollfds(org.jayhsu.libuvc4java.jna.libusb_pollfd.ByReference[])} instead
	 */
	@Deprecated 
	void libusb_free_pollfds(PointerByReference pollfds);
	/**
	 * Original signature : <code>void libusb_free_pollfds(libusb_pollfd**)</code><br>
	 * <i>native declaration : include\libusb.h:2089</i>
	 */
	void libusb_free_pollfds(org.jayhsu.libuvc4java.jna.libusb_pollfd.ByReference pollfds[]);
	/**
	 * Original signature : <code>void libusb_set_pollfd_notifiers(libusb_context*, libusb_pollfd_added_cb, libusb_pollfd_removed_cb, void*)</code><br>
	 * <i>native declaration : include\libusb.h:2090</i><br>
	 * @deprecated use the safer method {@link #libusb_set_pollfd_notifiers(com.sun.jna.ptr.PointerByReference, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_pollfd_added_cb, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_pollfd_removed_cb, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void libusb_set_pollfd_notifiers(Pointer ctx, LibusbLibrary.libusb_pollfd_added_cb added_cb, LibusbLibrary.libusb_pollfd_removed_cb removed_cb, Pointer user_data);
	/**
	 * Original signature : <code>void libusb_set_pollfd_notifiers(libusb_context*, libusb_pollfd_added_cb, libusb_pollfd_removed_cb, void*)</code><br>
	 * <i>native declaration : include\libusb.h:2090</i>
	 */
	void libusb_set_pollfd_notifiers(PointerByReference ctx, LibusbLibrary.libusb_pollfd_added_cb added_cb, LibusbLibrary.libusb_pollfd_removed_cb removed_cb, Pointer user_data);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Register a hotplug callback function<br>
	 * Register a callback with the libusb_context. The callback will fire<br>
	 * when a matching event occurs on a matching device. The callback is<br>
	 * armed until either it is deregistered with libusb_hotplug_deregister_callback()<br>
	 * or the supplied callback returns 1 to indicate it is finished processing events.<br>
	 * If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be<br>
	 * called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices<br>
	 * already plugged into the machine. Note that libusb modifies its internal<br>
	 * device list from a separate thread, while calling hotplug callbacks from<br>
	 * libusb_handle_events(), so it is possible for a device to already be present<br>
	 * on, or removed from, its internal device list, while the hotplug callbacks<br>
	 * still need to be dispatched. This means that when using \ref<br>
	 * LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival<br>
	 * of the same device, once from libusb_hotplug_register_callback() and once<br>
	 * from libusb_handle_events(); and/or your callback may be called for the<br>
	 * removal of a device for which an arrived call was never made.<br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102<br>
	 * \param[in] ctx context to register this callback with<br>
	 * \param[in] events bitwise or of hotplug events that will trigger this callback.<br>
	 *            See \ref libusb_hotplug_event<br>
	 * \param[in] flags bitwise or of hotplug flags that affect registration.<br>
	 *            See \ref libusb_hotplug_flag<br>
	 * \param[in] vendor_id the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] product_id the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] dev_class the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] cb_fn the function to be invoked on a matching event/device<br>
	 * \param[in] user_data user data to pass to the callback function<br>
	 * \param[out] callback_handle pointer to store the handle of the allocated callback (can be NULL)<br>
	 * \returns \ref LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_hotplug_register_callback(libusb_context*, int, int, int, int, int, libusb_hotplug_callback_fn, void*, libusb_hotplug_callback_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:2201</i><br>
	 * @deprecated use the safer methods {@link #libusb_hotplug_register_callback(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_hotplug_callback_fn, com.sun.jna.Pointer, java.nio.IntBuffer)} and {@link #libusb_hotplug_register_callback(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, org.jayhsu.libuvc4java.jna.LibusbLibrary.libusb_hotplug_callback_fn, com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int libusb_hotplug_register_callback(Pointer ctx, int events, int flags, int vendor_id, int product_id, int dev_class, LibusbLibrary.libusb_hotplug_callback_fn cb_fn, Pointer user_data, IntByReference callback_handle);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Register a hotplug callback function<br>
	 * Register a callback with the libusb_context. The callback will fire<br>
	 * when a matching event occurs on a matching device. The callback is<br>
	 * armed until either it is deregistered with libusb_hotplug_deregister_callback()<br>
	 * or the supplied callback returns 1 to indicate it is finished processing events.<br>
	 * If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be<br>
	 * called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices<br>
	 * already plugged into the machine. Note that libusb modifies its internal<br>
	 * device list from a separate thread, while calling hotplug callbacks from<br>
	 * libusb_handle_events(), so it is possible for a device to already be present<br>
	 * on, or removed from, its internal device list, while the hotplug callbacks<br>
	 * still need to be dispatched. This means that when using \ref<br>
	 * LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival<br>
	 * of the same device, once from libusb_hotplug_register_callback() and once<br>
	 * from libusb_handle_events(); and/or your callback may be called for the<br>
	 * removal of a device for which an arrived call was never made.<br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102<br>
	 * \param[in] ctx context to register this callback with<br>
	 * \param[in] events bitwise or of hotplug events that will trigger this callback.<br>
	 *            See \ref libusb_hotplug_event<br>
	 * \param[in] flags bitwise or of hotplug flags that affect registration.<br>
	 *            See \ref libusb_hotplug_flag<br>
	 * \param[in] vendor_id the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] product_id the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] dev_class the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] cb_fn the function to be invoked on a matching event/device<br>
	 * \param[in] user_data user data to pass to the callback function<br>
	 * \param[out] callback_handle pointer to store the handle of the allocated callback (can be NULL)<br>
	 * \returns \ref LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_hotplug_register_callback(libusb_context*, int, int, int, int, int, libusb_hotplug_callback_fn, void*, libusb_hotplug_callback_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:2201</i>
	 */
	int libusb_hotplug_register_callback(PointerByReference ctx, int events, int flags, int vendor_id, int product_id, int dev_class, LibusbLibrary.libusb_hotplug_callback_fn cb_fn, Pointer user_data, IntBuffer callback_handle);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Register a hotplug callback function<br>
	 * Register a callback with the libusb_context. The callback will fire<br>
	 * when a matching event occurs on a matching device. The callback is<br>
	 * armed until either it is deregistered with libusb_hotplug_deregister_callback()<br>
	 * or the supplied callback returns 1 to indicate it is finished processing events.<br>
	 * If the \ref LIBUSB_HOTPLUG_ENUMERATE is passed the callback will be<br>
	 * called with a \ref LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED for all devices<br>
	 * already plugged into the machine. Note that libusb modifies its internal<br>
	 * device list from a separate thread, while calling hotplug callbacks from<br>
	 * libusb_handle_events(), so it is possible for a device to already be present<br>
	 * on, or removed from, its internal device list, while the hotplug callbacks<br>
	 * still need to be dispatched. This means that when using \ref<br>
	 * LIBUSB_HOTPLUG_ENUMERATE, your callback may be called twice for the arrival<br>
	 * of the same device, once from libusb_hotplug_register_callback() and once<br>
	 * from libusb_handle_events(); and/or your callback may be called for the<br>
	 * removal of a device for which an arrived call was never made.<br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102<br>
	 * \param[in] ctx context to register this callback with<br>
	 * \param[in] events bitwise or of hotplug events that will trigger this callback.<br>
	 *            See \ref libusb_hotplug_event<br>
	 * \param[in] flags bitwise or of hotplug flags that affect registration.<br>
	 *            See \ref libusb_hotplug_flag<br>
	 * \param[in] vendor_id the vendor id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] product_id the product id to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] dev_class the device class to match or \ref LIBUSB_HOTPLUG_MATCH_ANY<br>
	 * \param[in] cb_fn the function to be invoked on a matching event/device<br>
	 * \param[in] user_data user data to pass to the callback function<br>
	 * \param[out] callback_handle pointer to store the handle of the allocated callback (can be NULL)<br>
	 * \returns \ref LIBUSB_SUCCESS on success LIBUSB_ERROR code on failure<br>
	 * Original signature : <code>int libusb_hotplug_register_callback(libusb_context*, int, int, int, int, int, libusb_hotplug_callback_fn, void*, libusb_hotplug_callback_handle*)</code><br>
	 * <i>native declaration : include\libusb.h:2201</i>
	 */
	int libusb_hotplug_register_callback(PointerByReference ctx, int events, int flags, int vendor_id, int product_id, int dev_class, LibusbLibrary.libusb_hotplug_callback_fn cb_fn, Pointer user_data, IntByReference callback_handle);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Deregisters a hotplug callback.<br>
	 * Deregister a callback from a libusb_context. This function is safe to call from within<br>
	 * a hotplug callback.<br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102<br>
	 * \param[in] ctx context this callback is registered with<br>
	 * \param[in] callback_handle the handle of the callback to deregister<br>
	 * Original signature : <code>void libusb_hotplug_deregister_callback(libusb_context*, libusb_hotplug_callback_handle)</code><br>
	 * <i>native declaration : include\libusb.h:2218</i><br>
	 * @deprecated use the safer method {@link #libusb_hotplug_deregister_callback(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	void libusb_hotplug_deregister_callback(Pointer ctx, int callback_handle);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Deregisters a hotplug callback.<br>
	 * Deregister a callback from a libusb_context. This function is safe to call from within<br>
	 * a hotplug callback.<br>
	 * Since version 1.0.16, \ref LIBUSB_API_VERSION >= 0x01000102<br>
	 * \param[in] ctx context this callback is registered with<br>
	 * \param[in] callback_handle the handle of the callback to deregister<br>
	 * Original signature : <code>void libusb_hotplug_deregister_callback(libusb_context*, libusb_hotplug_callback_handle)</code><br>
	 * <i>native declaration : include\libusb.h:2218</i>
	 */
	void libusb_hotplug_deregister_callback(PointerByReference ctx, int callback_handle);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Gets the user_data associated with a hotplug callback.<br>
	 * Since version v1.0.24 \ref LIBUSB_API_VERSION >= 0x01000108<br>
	 * \param[in] ctx context this callback is registered with<br>
	 * \param[in] callback_handle the handle of the callback to get the user_data of<br>
	 * Original signature : <code>void* libusb_hotplug_get_user_data(libusb_context*, libusb_hotplug_callback_handle)</code><br>
	 * <i>native declaration : include\libusb.h:2229</i><br>
	 * @deprecated use the safer method {@link #libusb_hotplug_get_user_data(com.sun.jna.ptr.PointerByReference, int)} instead
	 */
	@Deprecated 
	Pointer libusb_hotplug_get_user_data(Pointer ctx, int callback_handle);
	/**
	 * \ingroup libusb_hotplug<br>
	 * Gets the user_data associated with a hotplug callback.<br>
	 * Since version v1.0.24 \ref LIBUSB_API_VERSION >= 0x01000108<br>
	 * \param[in] ctx context this callback is registered with<br>
	 * \param[in] callback_handle the handle of the callback to get the user_data of<br>
	 * Original signature : <code>void* libusb_hotplug_get_user_data(libusb_context*, libusb_hotplug_callback_handle)</code><br>
	 * <i>native declaration : include\libusb.h:2229</i>
	 */
	Pointer libusb_hotplug_get_user_data(PointerByReference ctx, int callback_handle);
	/**
	 * Original signature : <code>WINAPIV libusb_set_option(libusb_context*, libusb_option, null)</code><br>
	 * <i>native declaration : include\libusb.h:2232</i><br>
	 * @deprecated use the safer method {@link #libusb_set_option(com.sun.jna.ptr.PointerByReference, int, java.lang.Object)} instead
	 */
	@Deprecated 
	LibusbLibrary.WINAPIV libusb_set_option(Pointer ctx, int option, Object... varArgs1);
	/**
	 * Original signature : <code>WINAPIV libusb_set_option(libusb_context*, libusb_option, null)</code><br>
	 * <i>native declaration : include\libusb.h:2232</i>
	 */
	LibusbLibrary.WINAPIV libusb_set_option(PointerByReference ctx, int option, Object... varArgs1);
	public static class WINAPIV extends PointerType {
		public WINAPIV(Pointer address) {
			super(address);
		}
		public WINAPIV() {
			super();
		}
	};
	public static class ssize_t extends PointerType {
		public ssize_t(Pointer address) {
			super(address);
		}
		public ssize_t() {
			super();
		}
	};
	public static class libusb_device extends PointerType {
		public libusb_device(Pointer address) {
			super(address);
		}
		public libusb_device() {
			super();
		}
	};
}
