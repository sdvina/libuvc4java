package org.jayhsu.libuvc4java.jna;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * \ingroup libusb_desc<br>
 * Structure containing an array of 0 or more interface association<br>
 * descriptors<br>
 * <i>native declaration : include\libusb.h:650</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class libusb_interface_association_descriptor_array extends Structure {
	/** C type : libusb_interface_association_descriptor* */
	public org.jayhsu.libuvc4java.jna.libusb_interface_association_descriptor.ByReference iad;
	public int length;
	public libusb_interface_association_descriptor_array() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("iad", "length");
	}
	/** @param iad C type : libusb_interface_association_descriptor* */
	public libusb_interface_association_descriptor_array(org.jayhsu.libuvc4java.jna.libusb_interface_association_descriptor.ByReference iad, int length) {
		super();
		this.iad = iad;
		this.length = length;
	}
	public libusb_interface_association_descriptor_array(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends libusb_interface_association_descriptor_array implements Structure.ByReference {
		
	};
	public static class ByValue extends libusb_interface_association_descriptor_array implements Structure.ByValue {
		
	};
}
